// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reports.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type BatchCreateReportsParams struct {
	ID           string
	ResourceID   string
	ResourceType string
	ReporterID   pgtype.Text
	Description  pgtype.Text
	Reason       int32
}

const countReports = `-- name: CountReports :one
SELECT COUNT(*) FROM reports
`

func (q *Queries) CountReports(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countReports)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createReport = `-- name: CreateReport :one
INSERT INTO reports (
  id,
  resource_id,
  resource_type,
  reporter_id,
  description,
  reason
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
) RETURNING id, resource_id, resource_type, reporter_id, description, reason, resolved, resolved_at, created_at, updated_at
`

type CreateReportParams struct {
	ID           string
	ResourceID   string
	ResourceType string
	ReporterID   pgtype.Text
	Description  pgtype.Text
	Reason       int32
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (Report, error) {
	row := q.db.QueryRow(ctx, createReport,
		arg.ID,
		arg.ResourceID,
		arg.ResourceType,
		arg.ReporterID,
		arg.Description,
		arg.Reason,
	)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.ResourceID,
		&i.ResourceType,
		&i.ReporterID,
		&i.Description,
		&i.Reason,
		&i.Resolved,
		&i.ResolvedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteReport = `-- name: DeleteReport :exec
DELETE FROM reports WHERE id = $1
`

func (q *Queries) DeleteReport(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteReport, id)
	return err
}

const getReportById = `-- name: GetReportById :one
SELECT id, resource_id, resource_type, reporter_id, description, reason, resolved, resolved_at, created_at, updated_at FROM reports WHERE id = $1 LIMIT 1
`

func (q *Queries) GetReportById(ctx context.Context, id string) (Report, error) {
	row := q.db.QueryRow(ctx, getReportById, id)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.ResourceID,
		&i.ResourceType,
		&i.ReporterID,
		&i.Description,
		&i.Reason,
		&i.Resolved,
		&i.ResolvedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getReportsPaginated = `-- name: GetReportsPaginated :many
SELECT id, resource_id, resource_type, reporter_id, description, reason, resolved, resolved_at, created_at, updated_at FROM reports
ORDER BY created_at DESC
OFFSET $1
LIMIT $2
`

type GetReportsPaginatedParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetReportsPaginated(ctx context.Context, arg GetReportsPaginatedParams) ([]Report, error) {
	rows, err := q.db.Query(ctx, getReportsPaginated, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.ResourceID,
			&i.ResourceType,
			&i.ReporterID,
			&i.Description,
			&i.Reason,
			&i.Resolved,
			&i.ResolvedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReport = `-- name: UpdateReport :exec
UPDATE reports SET
  description = $2,
  reason = $3,
  resolved = $4,
  resolved_at = $5
WHERE id = $1
`

type UpdateReportParams struct {
	ID          string
	Description pgtype.Text
	Reason      int32
	Resolved    bool
	ResolvedAt  pgtype.Timestamptz
}

func (q *Queries) UpdateReport(ctx context.Context, arg UpdateReportParams) error {
	_, err := q.db.Exec(ctx, updateReport,
		arg.ID,
		arg.Description,
		arg.Reason,
		arg.Resolved,
		arg.ResolvedAt,
	)
	return err
}
