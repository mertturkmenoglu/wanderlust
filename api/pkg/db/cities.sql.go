// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cities.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

type BatchCreateCitiesParams struct {
	ID          int32
	Name        string
	StateCode   string
	StateName   string
	CountryCode string
	CountryName string
	Image       string
	Lat         float64
	Lng         float64
	Description string
}

const createCity = `-- name: CreateCity :one
INSERT INTO cities (
  id,
  name,
  state_code,
  state_name,
  country_code,
  country_name,
  image,
  lat,
  lng,
  description
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10
) RETURNING id, name, state_code, state_name, country_code, country_name, image, lat, lng, description
`

type CreateCityParams struct {
	ID          int32
	Name        string
	StateCode   string
	StateName   string
	CountryCode string
	CountryName string
	Image       string
	Lat         float64
	Lng         float64
	Description string
}

func (q *Queries) CreateCity(ctx context.Context, arg CreateCityParams) (City, error) {
	row := q.db.QueryRow(ctx, createCity,
		arg.ID,
		arg.Name,
		arg.StateCode,
		arg.StateName,
		arg.CountryCode,
		arg.CountryName,
		arg.Image,
		arg.Lat,
		arg.Lng,
		arg.Description,
	)
	var i City
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StateCode,
		&i.StateName,
		&i.CountryCode,
		&i.CountryName,
		&i.Image,
		&i.Lat,
		&i.Lng,
		&i.Description,
	)
	return i, err
}

const findCityById = `-- name: FindCityById :one
SELECT id, name, state_code, state_name, country_code, country_name, image, lat, lng, description FROM cities
WHERE cities.id = $1 LIMIT 1
`

func (q *Queries) FindCityById(ctx context.Context, id int32) (City, error) {
	row := q.db.QueryRow(ctx, findCityById, id)
	var i City
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StateCode,
		&i.StateName,
		&i.CountryCode,
		&i.CountryName,
		&i.Image,
		&i.Lat,
		&i.Lng,
		&i.Description,
	)
	return i, err
}

const findManyCities = `-- name: FindManyCities :many
SELECT id, name, state_code, state_name, country_code, country_name, image, lat, lng, description FROM cities
ORDER BY id
`

func (q *Queries) FindManyCities(ctx context.Context) ([]City, error) {
	rows, err := q.db.Query(ctx, findManyCities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StateCode,
			&i.StateName,
			&i.CountryCode,
			&i.CountryName,
			&i.Image,
			&i.Lat,
			&i.Lng,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findManyCitiesById = `-- name: FindManyCitiesById :many
SELECT id, name, state_code, state_name, country_code, country_name, image, lat, lng, description FROM cities
WHERE id = ANY($1::int[])
`

func (q *Queries) FindManyCitiesById(ctx context.Context, dollar_1 []int32) ([]City, error) {
	rows, err := q.db.Query(ctx, findManyCitiesById, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StateCode,
			&i.StateName,
			&i.CountryCode,
			&i.CountryName,
			&i.Image,
			&i.Lat,
			&i.Lng,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findManyCityIdsByRand = `-- name: FindManyCityIdsByRand :many
SELECT id
FROM cities
ORDER BY RANDOM()
LIMIT $1
`

func (q *Queries) FindManyCityIdsByRand(ctx context.Context, limit int32) ([]int32, error) {
	rows, err := q.db.Query(ctx, findManyCityIdsByRand, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCityById = `-- name: RemoveCityById :execresult
DELETE FROM cities
WHERE id = $1
`

func (q *Queries) RemoveCityById(ctx context.Context, id int32) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, removeCityById, id)
}

const updateCity = `-- name: UpdateCity :execresult
UPDATE cities
SET
  name = $2,
  state_code = $3,
  state_name = $4,
  country_code = $5,
  country_name = $6,
  image = $7,
  lat = $8,
  lng = $9,
  description = $10
WHERE id = $1
`

type UpdateCityParams struct {
	ID          int32
	Name        string
	StateCode   string
	StateName   string
	CountryCode string
	CountryName string
	Image       string
	Lat         float64
	Lng         float64
	Description string
}

func (q *Queries) UpdateCity(ctx context.Context, arg UpdateCityParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateCity,
		arg.ID,
		arg.Name,
		arg.StateCode,
		arg.StateName,
		arg.CountryCode,
		arg.CountryName,
		arg.Image,
		arg.Lat,
		arg.Lng,
		arg.Description,
	)
}
