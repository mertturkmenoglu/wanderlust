// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: addresses.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

type BatchCreateAddressesParams struct {
	CityID     int32
	Line1      string
	Line2      pgtype.Text
	PostalCode pgtype.Text
	Lat        float64
	Lng        float64
}

const createAddress = `-- name: CreateAddress :one
INSERT INTO addresses (
  city_id,
  line1,
  line2,
  postal_code,
  lat,
  lng
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
) RETURNING id, city_id, line1, line2, postal_code, lat, lng
`

type CreateAddressParams struct {
	CityID     int32
	Line1      string
	Line2      pgtype.Text
	PostalCode pgtype.Text
	Lat        float64
	Lng        float64
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRow(ctx, createAddress,
		arg.CityID,
		arg.Line1,
		arg.Line2,
		arg.PostalCode,
		arg.Lat,
		arg.Lng,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.CityID,
		&i.Line1,
		&i.Line2,
		&i.PostalCode,
		&i.Lat,
		&i.Lng,
	)
	return i, err
}

const findManyAddressIdsByRand = `-- name: FindManyAddressIdsByRand :many
SELECT id
FROM addresses
ORDER BY RANDOM()
LIMIT $1
`

func (q *Queries) FindManyAddressIdsByRand(ctx context.Context, limit int32) ([]int32, error) {
	rows, err := q.db.Query(ctx, findManyAddressIdsByRand, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddress = `-- name: UpdateAddress :execresult
UPDATE addresses
SET
  city_id = $1,
  line1 = $2,
  line2 = $3,
  postal_code = $4,
  lat = $5,
  lng = $6
WHERE id = $7
`

type UpdateAddressParams struct {
	CityID     int32
	Line1      string
	Line2      pgtype.Text
	PostalCode pgtype.Text
	Lat        float64
	Lng        float64
	ID         int32
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateAddress,
		arg.CityID,
		arg.Line1,
		arg.Line2,
		arg.PostalCode,
		arg.Lat,
		arg.Lng,
		arg.ID,
	)
}
