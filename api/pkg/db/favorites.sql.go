// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: favorites.sql

package db

import (
	"context"
)

type BatchCreateFavoritesParams struct {
	UserID string
	PoiID  string
}

const countUserFavorites = `-- name: CountUserFavorites :one
SELECT COUNT(*) FROM favorites
WHERE user_id = $1
`

func (q *Queries) CountUserFavorites(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRow(ctx, countUserFavorites, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createFavorite = `-- name: CreateFavorite :one
INSERT INTO favorites (
  user_id,
  poi_id
) VALUES (
  $1,
  $2
)
RETURNING id, poi_id, user_id, created_at
`

type CreateFavoriteParams struct {
	UserID string
	PoiID  string
}

func (q *Queries) CreateFavorite(ctx context.Context, arg CreateFavoriteParams) (Favorite, error) {
	row := q.db.QueryRow(ctx, createFavorite, arg.UserID, arg.PoiID)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.PoiID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFavoriteByPoiId = `-- name: DeleteFavoriteByPoiId :exec
DELETE FROM favorites
WHERE poi_id = $1 AND user_id = $2
`

type DeleteFavoriteByPoiIdParams struct {
	PoiID  string
	UserID string
}

func (q *Queries) DeleteFavoriteByPoiId(ctx context.Context, arg DeleteFavoriteByPoiIdParams) error {
	_, err := q.db.Exec(ctx, deleteFavoriteByPoiId, arg.PoiID, arg.UserID)
	return err
}

const getFavoriteById = `-- name: GetFavoriteById :one
SELECT id, poi_id, user_id, created_at FROM favorites
WHERE id = $1
`

func (q *Queries) GetFavoriteById(ctx context.Context, id int32) (Favorite, error) {
	row := q.db.QueryRow(ctx, getFavoriteById, id)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.PoiID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getFavoritesByUserId = `-- name: GetFavoritesByUserId :many
SELECT id, poi_id, user_id, created_at
FROM favorites
WHERE user_id = $1
ORDER BY created_at DESC
OFFSET $2
LIMIT $3
`

type GetFavoritesByUserIdParams struct {
	UserID string
	Offset int32
	Limit  int32
}

func (q *Queries) GetFavoritesByUserId(ctx context.Context, arg GetFavoritesByUserIdParams) ([]Favorite, error) {
	rows, err := q.db.Query(ctx, getFavoritesByUserId, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Favorite
	for rows.Next() {
		var i Favorite
		if err := rows.Scan(
			&i.ID,
			&i.PoiID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isFavorite = `-- name: IsFavorite :one
SELECT id FROM favorites
WHERE poi_id = $1 AND user_id = $2
`

type IsFavoriteParams struct {
	PoiID  string
	UserID string
}

func (q *Queries) IsFavorite(ctx context.Context, arg IsFavoriteParams) (int32, error) {
	row := q.db.QueryRow(ctx, isFavorite, arg.PoiID, arg.UserID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
