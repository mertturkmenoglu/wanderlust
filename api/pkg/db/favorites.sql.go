// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: favorites.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

type BatchCreateFavoritesParams struct {
	UserID  string
	PlaceID string
}

const countFavoritesByPlaceId = `-- name: CountFavoritesByPlaceId :one
SELECT COUNT(*) FROM favorites
WHERE place_id = $1
`

func (q *Queries) CountFavoritesByPlaceId(ctx context.Context, placeID string) (int64, error) {
	row := q.db.QueryRow(ctx, countFavoritesByPlaceId, placeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countFavoritesByUserId = `-- name: CountFavoritesByUserId :one
SELECT COUNT(*) FROM favorites
WHERE user_id = $1
`

func (q *Queries) CountFavoritesByUserId(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRow(ctx, countFavoritesByUserId, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createFavorite = `-- name: CreateFavorite :one
INSERT INTO favorites (
  user_id,
  place_id
) VALUES (
  $1,
  $2
) RETURNING id, place_id, user_id, created_at
`

type CreateFavoriteParams struct {
	UserID  string
	PlaceID string
}

func (q *Queries) CreateFavorite(ctx context.Context, arg CreateFavoriteParams) (Favorite, error) {
	row := q.db.QueryRow(ctx, createFavorite, arg.UserID, arg.PlaceID)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.PlaceID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const findManyFavoritesByUserId = `-- name: FindManyFavoritesByUserId :many
SELECT
  id, place_id, user_id, created_at
FROM favorites
WHERE user_id = $1
ORDER BY created_at DESC
OFFSET $2
LIMIT $3
`

type FindManyFavoritesByUserIdParams struct {
	UserID string
	Offset int32
	Limit  int32
}

func (q *Queries) FindManyFavoritesByUserId(ctx context.Context, arg FindManyFavoritesByUserIdParams) ([]Favorite, error) {
	rows, err := q.db.Query(ctx, findManyFavoritesByUserId, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Favorite
	for rows.Next() {
		var i Favorite
		if err := rows.Scan(
			&i.ID,
			&i.PlaceID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isPlaceFavorited = `-- name: IsPlaceFavorited :one
SELECT EXISTS (
  SELECT 1 FROM favorites
  WHERE place_id = $1 AND user_id = $2
)
`

type IsPlaceFavoritedParams struct {
	PlaceID string
	UserID  string
}

func (q *Queries) IsPlaceFavorited(ctx context.Context, arg IsPlaceFavoritedParams) (bool, error) {
	row := q.db.QueryRow(ctx, isPlaceFavorited, arg.PlaceID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const removeFavoriteByPlaceIdAndUserId = `-- name: RemoveFavoriteByPlaceIdAndUserId :execresult
DELETE FROM favorites
WHERE place_id = $1 AND user_id = $2
`

type RemoveFavoriteByPlaceIdAndUserIdParams struct {
	PlaceID string
	UserID  string
}

func (q *Queries) RemoveFavoriteByPlaceIdAndUserId(ctx context.Context, arg RemoveFavoriteByPlaceIdAndUserIdParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, removeFavoriteByPlaceIdAndUserId, arg.PlaceID, arg.UserID)
}
