// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pois.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type BatchCreatePoisParams struct {
	ID                 string
	Name               string
	Phone              pgtype.Text
	Description        string
	AddressID          int32
	Website            pgtype.Text
	PriceLevel         int16
	AccessibilityLevel int16
	TotalVotes         int32
	TotalPoints        int32
	TotalFavorites     int32
	CategoryID         int16
	OpenTimes          []byte
}

const countPois = `-- name: CountPois :one
SELECT COUNT(*) FROM pois
`

func (q *Queries) CountPois(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countPois)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOnePoi = `-- name: CreateOnePoi :one
INSERT INTO pois (
  id,
  name,
  phone,
  description,
  address_id,
  website,
  price_level,
  accessibility_level,
  total_votes,
  total_points,
  total_favorites,
  category_id,
  open_times
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10,
  $11,
  $12,
  $13
) RETURNING id, name, phone, description, address_id, website, price_level, accessibility_level, total_votes, total_points, total_favorites, category_id, open_times, created_at, updated_at
`

type CreateOnePoiParams struct {
	ID                 string
	Name               string
	Phone              pgtype.Text
	Description        string
	AddressID          int32
	Website            pgtype.Text
	PriceLevel         int16
	AccessibilityLevel int16
	TotalVotes         int32
	TotalPoints        int32
	TotalFavorites     int32
	CategoryID         int16
	OpenTimes          []byte
}

func (q *Queries) CreateOnePoi(ctx context.Context, arg CreateOnePoiParams) (Poi, error) {
	row := q.db.QueryRow(ctx, createOnePoi,
		arg.ID,
		arg.Name,
		arg.Phone,
		arg.Description,
		arg.AddressID,
		arg.Website,
		arg.PriceLevel,
		arg.AccessibilityLevel,
		arg.TotalVotes,
		arg.TotalPoints,
		arg.TotalFavorites,
		arg.CategoryID,
		arg.OpenTimes,
	)
	var i Poi
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.AddressID,
		&i.Website,
		&i.PriceLevel,
		&i.AccessibilityLevel,
		&i.TotalVotes,
		&i.TotalPoints,
		&i.TotalFavorites,
		&i.CategoryID,
		&i.OpenTimes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPoiMedia = `-- name: CreatePoiMedia :one
INSERT INTO media (
  poi_id,
  url,
  alt,
  caption,
  media_order
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING id, poi_id, url, alt, caption, media_order, created_at
`

type CreatePoiMediaParams struct {
	PoiID      string
	Url        string
	Alt        string
	Caption    pgtype.Text
	MediaOrder int16
}

func (q *Queries) CreatePoiMedia(ctx context.Context, arg CreatePoiMediaParams) (Medium, error) {
	row := q.db.QueryRow(ctx, createPoiMedia,
		arg.PoiID,
		arg.Url,
		arg.Alt,
		arg.Caption,
		arg.MediaOrder,
	)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.PoiID,
		&i.Url,
		&i.Alt,
		&i.Caption,
		&i.MediaOrder,
		&i.CreatedAt,
	)
	return i, err
}

const deletePoiAllAmenities = `-- name: DeletePoiAllAmenities :exec
DELETE FROM amenities_pois
WHERE poi_id = $1
`

func (q *Queries) DeletePoiAllAmenities(ctx context.Context, poiID string) error {
	_, err := q.db.Exec(ctx, deletePoiAllAmenities, poiID)
	return err
}

const getFavoritePois = `-- name: GetFavoritePois :many
SELECT
  pois.id, pois.name, pois.phone, pois.description, pois.address_id, pois.website, pois.price_level, pois.accessibility_level, pois.total_votes, pois.total_points, pois.total_favorites, pois.category_id, pois.open_times, pois.created_at, pois.updated_at,
  categories.id, categories.name, categories.image,
  addresses.id, addresses.city_id, addresses.line1, addresses.line2, addresses.postal_code, addresses.lat, addresses.lng,
  cities.id, cities.name, cities.state_code, cities.state_name, cities.country_code, cities.country_name, cities.image_url, cities.latitude, cities.longitude, cities.description, cities.img_license, cities.img_license_link, cities.img_attr, cities.img_attr_link,
  media.id, media.poi_id, media.url, media.alt, media.caption, media.media_order, media.created_at
FROM pois
  LEFT JOIN categories ON categories.id = pois.category_id
  LEFT JOIN addresses ON addresses.id = pois.address_id
  LEFT JOIN cities ON addresses.city_id = cities.id
  LEFT JOIN media ON media.poi_id = pois.id
WHERE media.media_order = 1
ORDER BY total_favorites DESC
LIMIT 25
`

type GetFavoritePoisRow struct {
	Poi      Poi
	Category Category
	Address  Address
	City     City
	Medium   Medium
}

func (q *Queries) GetFavoritePois(ctx context.Context) ([]GetFavoritePoisRow, error) {
	rows, err := q.db.Query(ctx, getFavoritePois)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFavoritePoisRow
	for rows.Next() {
		var i GetFavoritePoisRow
		if err := rows.Scan(
			&i.Poi.ID,
			&i.Poi.Name,
			&i.Poi.Phone,
			&i.Poi.Description,
			&i.Poi.AddressID,
			&i.Poi.Website,
			&i.Poi.PriceLevel,
			&i.Poi.AccessibilityLevel,
			&i.Poi.TotalVotes,
			&i.Poi.TotalPoints,
			&i.Poi.TotalFavorites,
			&i.Poi.CategoryID,
			&i.Poi.OpenTimes,
			&i.Poi.CreatedAt,
			&i.Poi.UpdatedAt,
			&i.Category.ID,
			&i.Category.Name,
			&i.Category.Image,
			&i.Address.ID,
			&i.Address.CityID,
			&i.Address.Line1,
			&i.Address.Line2,
			&i.Address.PostalCode,
			&i.Address.Lat,
			&i.Address.Lng,
			&i.City.ID,
			&i.City.Name,
			&i.City.StateCode,
			&i.City.StateName,
			&i.City.CountryCode,
			&i.City.CountryName,
			&i.City.ImageUrl,
			&i.City.Latitude,
			&i.City.Longitude,
			&i.City.Description,
			&i.City.ImgLicense,
			&i.City.ImgLicenseLink,
			&i.City.ImgAttr,
			&i.City.ImgAttrLink,
			&i.Medium.ID,
			&i.Medium.PoiID,
			&i.Medium.Url,
			&i.Medium.Alt,
			&i.Medium.Caption,
			&i.Medium.MediaOrder,
			&i.Medium.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFavoritePoisIds = `-- name: GetFavoritePoisIds :many
SELECT 
  id 
FROM 
  pois 
ORDER BY total_favorites DESC 
LIMIT 25
`

func (q *Queries) GetFavoritePoisIds(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getFavoritePoisIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeaturedPois = `-- name: GetFeaturedPois :many
SELECT 
  pois.id, pois.name, pois.phone, pois.description, pois.address_id, pois.website, pois.price_level, pois.accessibility_level, pois.total_votes, pois.total_points, pois.total_favorites, pois.category_id, pois.open_times, pois.created_at, pois.updated_at,
  categories.id, categories.name, categories.image,
  addresses.id, addresses.city_id, addresses.line1, addresses.line2, addresses.postal_code, addresses.lat, addresses.lng,
  cities.id, cities.name, cities.state_code, cities.state_name, cities.country_code, cities.country_name, cities.image_url, cities.latitude, cities.longitude, cities.description, cities.img_license, cities.img_license_link, cities.img_attr, cities.img_attr_link,
  media.id, media.poi_id, media.url, media.alt, media.caption, media.media_order, media.created_at
FROM pois
  LEFT JOIN categories ON categories.id = pois.category_id
  LEFT JOIN addresses ON addresses.id = pois.address_id
  LEFT JOIN cities ON addresses.city_id = cities.id
  LEFT JOIN media ON media.poi_id = pois.id
WHERE total_votes != 0 AND media.media_order = 1
ORDER BY total_points / total_votes DESC, total_votes DESC
LIMIT 25
`

type GetFeaturedPoisRow struct {
	Poi      Poi
	Category Category
	Address  Address
	City     City
	Medium   Medium
}

func (q *Queries) GetFeaturedPois(ctx context.Context) ([]GetFeaturedPoisRow, error) {
	rows, err := q.db.Query(ctx, getFeaturedPois)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeaturedPoisRow
	for rows.Next() {
		var i GetFeaturedPoisRow
		if err := rows.Scan(
			&i.Poi.ID,
			&i.Poi.Name,
			&i.Poi.Phone,
			&i.Poi.Description,
			&i.Poi.AddressID,
			&i.Poi.Website,
			&i.Poi.PriceLevel,
			&i.Poi.AccessibilityLevel,
			&i.Poi.TotalVotes,
			&i.Poi.TotalPoints,
			&i.Poi.TotalFavorites,
			&i.Poi.CategoryID,
			&i.Poi.OpenTimes,
			&i.Poi.CreatedAt,
			&i.Poi.UpdatedAt,
			&i.Category.ID,
			&i.Category.Name,
			&i.Category.Image,
			&i.Address.ID,
			&i.Address.CityID,
			&i.Address.Line1,
			&i.Address.Line2,
			&i.Address.PostalCode,
			&i.Address.Lat,
			&i.Address.Lng,
			&i.City.ID,
			&i.City.Name,
			&i.City.StateCode,
			&i.City.StateName,
			&i.City.CountryCode,
			&i.City.CountryName,
			&i.City.ImageUrl,
			&i.City.Latitude,
			&i.City.Longitude,
			&i.City.Description,
			&i.City.ImgLicense,
			&i.City.ImgLicenseLink,
			&i.City.ImgAttr,
			&i.City.ImgAttrLink,
			&i.Medium.ID,
			&i.Medium.PoiID,
			&i.Medium.Url,
			&i.Medium.Alt,
			&i.Medium.Caption,
			&i.Medium.MediaOrder,
			&i.Medium.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeaturedPoisIds = `-- name: GetFeaturedPoisIds :many
SELECT 
  id 
FROM 
  pois
WHERE total_votes != 0
ORDER BY total_points / total_votes DESC, total_votes DESC
LIMIT 25
`

func (q *Queries) GetFeaturedPoisIds(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getFeaturedPoisIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewPois = `-- name: GetNewPois :many
SELECT 
  pois.id, pois.name, pois.phone, pois.description, pois.address_id, pois.website, pois.price_level, pois.accessibility_level, pois.total_votes, pois.total_points, pois.total_favorites, pois.category_id, pois.open_times, pois.created_at, pois.updated_at,
  categories.id, categories.name, categories.image,
  addresses.id, addresses.city_id, addresses.line1, addresses.line2, addresses.postal_code, addresses.lat, addresses.lng,
  cities.id, cities.name, cities.state_code, cities.state_name, cities.country_code, cities.country_name, cities.image_url, cities.latitude, cities.longitude, cities.description, cities.img_license, cities.img_license_link, cities.img_attr, cities.img_attr_link,
  media.id, media.poi_id, media.url, media.alt, media.caption, media.media_order, media.created_at
FROM pois
  LEFT JOIN categories ON categories.id = pois.category_id
  LEFT JOIN addresses ON addresses.id = pois.address_id
  LEFT JOIN cities ON addresses.city_id = cities.id
  LEFT JOIN media ON media.poi_id = pois.id
WHERE media.media_order = 1
ORDER BY pois.created_at DESC
LIMIT 25
`

type GetNewPoisRow struct {
	Poi      Poi
	Category Category
	Address  Address
	City     City
	Medium   Medium
}

func (q *Queries) GetNewPois(ctx context.Context) ([]GetNewPoisRow, error) {
	rows, err := q.db.Query(ctx, getNewPois)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNewPoisRow
	for rows.Next() {
		var i GetNewPoisRow
		if err := rows.Scan(
			&i.Poi.ID,
			&i.Poi.Name,
			&i.Poi.Phone,
			&i.Poi.Description,
			&i.Poi.AddressID,
			&i.Poi.Website,
			&i.Poi.PriceLevel,
			&i.Poi.AccessibilityLevel,
			&i.Poi.TotalVotes,
			&i.Poi.TotalPoints,
			&i.Poi.TotalFavorites,
			&i.Poi.CategoryID,
			&i.Poi.OpenTimes,
			&i.Poi.CreatedAt,
			&i.Poi.UpdatedAt,
			&i.Category.ID,
			&i.Category.Name,
			&i.Category.Image,
			&i.Address.ID,
			&i.Address.CityID,
			&i.Address.Line1,
			&i.Address.Line2,
			&i.Address.PostalCode,
			&i.Address.Lat,
			&i.Address.Lng,
			&i.City.ID,
			&i.City.Name,
			&i.City.StateCode,
			&i.City.StateName,
			&i.City.CountryCode,
			&i.City.CountryName,
			&i.City.ImageUrl,
			&i.City.Latitude,
			&i.City.Longitude,
			&i.City.Description,
			&i.City.ImgLicense,
			&i.City.ImgLicenseLink,
			&i.City.ImgAttr,
			&i.City.ImgAttrLink,
			&i.Medium.ID,
			&i.Medium.PoiID,
			&i.Medium.Url,
			&i.Medium.Alt,
			&i.Medium.Caption,
			&i.Medium.MediaOrder,
			&i.Medium.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewPoisIds = `-- name: GetNewPoisIds :many
SELECT 
  id 
FROM 
  pois
ORDER BY created_at DESC
LIMIT 25
`

func (q *Queries) GetNewPoisIds(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getNewPoisIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedPoiIds = `-- name: GetPaginatedPoiIds :many
SELECT id FROM pois
ORDER BY created_at ASC
OFFSET $1
LIMIT $2
`

type GetPaginatedPoiIdsParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetPaginatedPoiIds(ctx context.Context, arg GetPaginatedPoiIdsParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getPaginatedPoiIds, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPoiAmenities = `-- name: GetPoiAmenities :many
SELECT amenities_pois.amenity_id, amenities_pois.poi_id, amenities.id, amenities.name FROM amenities_pois
LEFT JOIN amenities ON amenities.id = amenities_pois.amenity_id
WHERE poi_id = $1
ORDER BY amenity_id
`

type GetPoiAmenitiesRow struct {
	AmenitiesPoi AmenitiesPoi
	Amenity      Amenity
}

func (q *Queries) GetPoiAmenities(ctx context.Context, poiID string) ([]GetPoiAmenitiesRow, error) {
	rows, err := q.db.Query(ctx, getPoiAmenities, poiID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPoiAmenitiesRow
	for rows.Next() {
		var i GetPoiAmenitiesRow
		if err := rows.Scan(
			&i.AmenitiesPoi.AmenityID,
			&i.AmenitiesPoi.PoiID,
			&i.Amenity.ID,
			&i.Amenity.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPoiById = `-- name: GetPoiById :one
SELECT pois.id, pois.name, pois.phone, pois.description, pois.address_id, pois.website, pois.price_level, pois.accessibility_level, pois.total_votes, pois.total_points, pois.total_favorites, pois.category_id, pois.open_times, pois.created_at, pois.updated_at, addresses.id, addresses.city_id, addresses.line1, addresses.line2, addresses.postal_code, addresses.lat, addresses.lng, categories.id, categories.name, categories.image, cities.id, cities.name, cities.state_code, cities.state_name, cities.country_code, cities.country_name, cities.image_url, cities.latitude, cities.longitude, cities.description, cities.img_license, cities.img_license_link, cities.img_attr, cities.img_attr_link FROM pois
LEFT JOIN addresses ON addresses.id = pois.address_id
LEFT JOIN categories ON categories.id = pois.category_id
LEFT JOIN cities ON cities.id = addresses.city_id
WHERE pois.id = $1 LIMIT 1
`

type GetPoiByIdRow struct {
	Poi      Poi
	Address  Address
	Category Category
	City     City
}

func (q *Queries) GetPoiById(ctx context.Context, id string) (GetPoiByIdRow, error) {
	row := q.db.QueryRow(ctx, getPoiById, id)
	var i GetPoiByIdRow
	err := row.Scan(
		&i.Poi.ID,
		&i.Poi.Name,
		&i.Poi.Phone,
		&i.Poi.Description,
		&i.Poi.AddressID,
		&i.Poi.Website,
		&i.Poi.PriceLevel,
		&i.Poi.AccessibilityLevel,
		&i.Poi.TotalVotes,
		&i.Poi.TotalPoints,
		&i.Poi.TotalFavorites,
		&i.Poi.CategoryID,
		&i.Poi.OpenTimes,
		&i.Poi.CreatedAt,
		&i.Poi.UpdatedAt,
		&i.Address.ID,
		&i.Address.CityID,
		&i.Address.Line1,
		&i.Address.Line2,
		&i.Address.PostalCode,
		&i.Address.Lat,
		&i.Address.Lng,
		&i.Category.ID,
		&i.Category.Name,
		&i.Category.Image,
		&i.City.ID,
		&i.City.Name,
		&i.City.StateCode,
		&i.City.StateName,
		&i.City.CountryCode,
		&i.City.CountryName,
		&i.City.ImageUrl,
		&i.City.Latitude,
		&i.City.Longitude,
		&i.City.Description,
		&i.City.ImgLicense,
		&i.City.ImgLicenseLink,
		&i.City.ImgAttr,
		&i.City.ImgAttrLink,
	)
	return i, err
}

const getPoiMedia = `-- name: GetPoiMedia :many
SELECT id, poi_id, url, alt, caption, media_order, created_at FROM media
WHERE poi_id = $1
ORDER BY media_order
`

func (q *Queries) GetPoiMedia(ctx context.Context, poiID string) ([]Medium, error) {
	rows, err := q.db.Query(ctx, getPoiMedia, poiID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Medium
	for rows.Next() {
		var i Medium
		if err := rows.Scan(
			&i.ID,
			&i.PoiID,
			&i.Url,
			&i.Alt,
			&i.Caption,
			&i.MediaOrder,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPoisByIdsPopulated = `-- name: GetPoisByIdsPopulated :many
SELECT
  pois.id, pois.name, pois.phone, pois.description, pois.address_id, pois.website, pois.price_level, pois.accessibility_level, pois.total_votes, pois.total_points, pois.total_favorites, pois.category_id, pois.open_times, pois.created_at, pois.updated_at,
  addr.id, addr.city_id, addr.line1, addr.line2, addr.postal_code, addr.lat, addr.lng,
  c.id, c.name, c.state_code, c.state_name, c.country_code, c.country_name, c.image_url, c.latitude, c.longitude, c.description, c.img_license, c.img_license_link, c.img_attr, c.img_attr_link,
  cat.id, cat.name, cat.image,
  media_agg.media,
  amenities_agg.amenities
FROM public.pois
JOIN public.addresses addr ON pois.address_id = addr.id
JOIN public.cities c ON addr.city_id = c.id
JOIN public.categories cat ON pois.category_id = cat.id

LEFT JOIN LATERAL (
  SELECT json_agg(jsonb_build_object(
    'id', m.id,
    'url', m.url,
    'alt', m.alt,
    'caption', m.caption,
    'media_order', m.media_order
  ) ORDER BY m.media_order) AS media
  FROM public.media m
  WHERE m.poi_id = pois.id
) media_agg ON true

LEFT JOIN LATERAL (
  SELECT json_agg(jsonb_build_object(
    'id', a.id,
    'name', a.name
  )) AS amenities
  FROM public.amenities_pois ap
  JOIN public.amenities a ON ap.amenity_id = a.id
  WHERE ap.poi_id = pois.id
) amenities_agg ON true

WHERE pois.id = ANY($1::TEXT[])
`

type GetPoisByIdsPopulatedRow struct {
	Poi       Poi
	Address   Address
	City      City
	Category  Category
	Media     []byte
	Amenities []byte
}

// LATERAL join for media
// LATERAL join for amenities
func (q *Queries) GetPoisByIdsPopulated(ctx context.Context, dollar_1 []string) ([]GetPoisByIdsPopulatedRow, error) {
	rows, err := q.db.Query(ctx, getPoisByIdsPopulated, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPoisByIdsPopulatedRow
	for rows.Next() {
		var i GetPoisByIdsPopulatedRow
		if err := rows.Scan(
			&i.Poi.ID,
			&i.Poi.Name,
			&i.Poi.Phone,
			&i.Poi.Description,
			&i.Poi.AddressID,
			&i.Poi.Website,
			&i.Poi.PriceLevel,
			&i.Poi.AccessibilityLevel,
			&i.Poi.TotalVotes,
			&i.Poi.TotalPoints,
			&i.Poi.TotalFavorites,
			&i.Poi.CategoryID,
			&i.Poi.OpenTimes,
			&i.Poi.CreatedAt,
			&i.Poi.UpdatedAt,
			&i.Address.ID,
			&i.Address.CityID,
			&i.Address.Line1,
			&i.Address.Line2,
			&i.Address.PostalCode,
			&i.Address.Lat,
			&i.Address.Lng,
			&i.City.ID,
			&i.City.Name,
			&i.City.StateCode,
			&i.City.StateName,
			&i.City.CountryCode,
			&i.City.CountryName,
			&i.City.ImageUrl,
			&i.City.Latitude,
			&i.City.Longitude,
			&i.City.Description,
			&i.City.ImgLicense,
			&i.City.ImgLicenseLink,
			&i.City.ImgAttr,
			&i.City.ImgAttrLink,
			&i.Category.ID,
			&i.Category.Name,
			&i.Category.Image,
			&i.Media,
			&i.Amenities,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPopularPois = `-- name: GetPopularPois :many
SELECT
  pois.id, pois.name, pois.phone, pois.description, pois.address_id, pois.website, pois.price_level, pois.accessibility_level, pois.total_votes, pois.total_points, pois.total_favorites, pois.category_id, pois.open_times, pois.created_at, pois.updated_at,
  categories.id, categories.name, categories.image,
  addresses.id, addresses.city_id, addresses.line1, addresses.line2, addresses.postal_code, addresses.lat, addresses.lng,
  cities.id, cities.name, cities.state_code, cities.state_name, cities.country_code, cities.country_name, cities.image_url, cities.latitude, cities.longitude, cities.description, cities.img_license, cities.img_license_link, cities.img_attr, cities.img_attr_link,
  media.id, media.poi_id, media.url, media.alt, media.caption, media.media_order, media.created_at
FROM pois
  LEFT JOIN categories ON categories.id = pois.category_id
  LEFT JOIN addresses ON addresses.id = pois.address_id
  LEFT JOIN cities ON addresses.city_id = cities.id
  LEFT JOIN media ON media.poi_id = pois.id
WHERE media.media_order = 1
ORDER BY total_votes DESC
LIMIT 25
`

type GetPopularPoisRow struct {
	Poi      Poi
	Category Category
	Address  Address
	City     City
	Medium   Medium
}

func (q *Queries) GetPopularPois(ctx context.Context) ([]GetPopularPoisRow, error) {
	rows, err := q.db.Query(ctx, getPopularPois)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPopularPoisRow
	for rows.Next() {
		var i GetPopularPoisRow
		if err := rows.Scan(
			&i.Poi.ID,
			&i.Poi.Name,
			&i.Poi.Phone,
			&i.Poi.Description,
			&i.Poi.AddressID,
			&i.Poi.Website,
			&i.Poi.PriceLevel,
			&i.Poi.AccessibilityLevel,
			&i.Poi.TotalVotes,
			&i.Poi.TotalPoints,
			&i.Poi.TotalFavorites,
			&i.Poi.CategoryID,
			&i.Poi.OpenTimes,
			&i.Poi.CreatedAt,
			&i.Poi.UpdatedAt,
			&i.Category.ID,
			&i.Category.Name,
			&i.Category.Image,
			&i.Address.ID,
			&i.Address.CityID,
			&i.Address.Line1,
			&i.Address.Line2,
			&i.Address.PostalCode,
			&i.Address.Lat,
			&i.Address.Lng,
			&i.City.ID,
			&i.City.Name,
			&i.City.StateCode,
			&i.City.StateName,
			&i.City.CountryCode,
			&i.City.CountryName,
			&i.City.ImageUrl,
			&i.City.Latitude,
			&i.City.Longitude,
			&i.City.Description,
			&i.City.ImgLicense,
			&i.City.ImgLicenseLink,
			&i.City.ImgAttr,
			&i.City.ImgAttrLink,
			&i.Medium.ID,
			&i.Medium.PoiID,
			&i.Medium.Url,
			&i.Medium.Alt,
			&i.Medium.Caption,
			&i.Medium.MediaOrder,
			&i.Medium.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPopularPoisIds = `-- name: GetPopularPoisIds :many
SELECT 
  id 
FROM 
  pois
ORDER BY total_votes DESC
LIMIT 25
`

func (q *Queries) GetPopularPoisIds(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getPopularPoisIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementTotalPoints = `-- name: IncrementTotalPoints :exec
UPDATE pois
SET total_points = total_points + $2
WHERE id = $1
`

type IncrementTotalPointsParams struct {
	ID          string
	TotalPoints int32
}

func (q *Queries) IncrementTotalPoints(ctx context.Context, arg IncrementTotalPointsParams) error {
	_, err := q.db.Exec(ctx, incrementTotalPoints, arg.ID, arg.TotalPoints)
	return err
}

const incrementTotalVotes = `-- name: IncrementTotalVotes :exec
UPDATE pois
SET total_votes = total_votes + 1
WHERE id = $1
`

func (q *Queries) IncrementTotalVotes(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, incrementTotalVotes, id)
	return err
}

const peekPois = `-- name: PeekPois :many
SELECT id, name, phone, description, address_id, website, price_level, accessibility_level, total_votes, total_points, total_favorites, category_id, open_times, created_at, updated_at FROM pois
LIMIT 25
`

func (q *Queries) PeekPois(ctx context.Context) ([]Poi, error) {
	rows, err := q.db.Query(ctx, peekPois)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Poi
	for rows.Next() {
		var i Poi
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.AddressID,
			&i.Website,
			&i.PriceLevel,
			&i.AccessibilityLevel,
			&i.TotalVotes,
			&i.TotalPoints,
			&i.TotalFavorites,
			&i.CategoryID,
			&i.OpenTimes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const randSelectPois = `-- name: RandSelectPois :many
SELECT id
FROM pois
ORDER BY RANDOM()
LIMIT $1
`

func (q *Queries) RandSelectPois(ctx context.Context, limit int32) ([]string, error) {
	rows, err := q.db.Query(ctx, randSelectPois, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePoiInfo = `-- name: UpdatePoiInfo :exec
UPDATE pois
SET
  name = $1,
  category_id = $2,
  description = $3,
  phone = $4,
  website = $5,
  accessibility_level = $6,
  price_level = $7
WHERE id = $8
`

type UpdatePoiInfoParams struct {
	Name               string
	CategoryID         int16
	Description        string
	Phone              pgtype.Text
	Website            pgtype.Text
	AccessibilityLevel int16
	PriceLevel         int16
	ID                 string
}

func (q *Queries) UpdatePoiInfo(ctx context.Context, arg UpdatePoiInfoParams) error {
	_, err := q.db.Exec(ctx, updatePoiInfo,
		arg.Name,
		arg.CategoryID,
		arg.Description,
		arg.Phone,
		arg.Website,
		arg.AccessibilityLevel,
		arg.PriceLevel,
		arg.ID,
	)
	return err
}
