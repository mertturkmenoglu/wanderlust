// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pois.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type BatchCreatePoiMediaParams struct {
	PoiID string
	Url   string
	Alt   string
	Index int16
}

type BatchCreatePoisParams struct {
	ID                 string
	Name               string
	Phone              pgtype.Text
	Description        string
	AddressID          int32
	Website            pgtype.Text
	PriceLevel         int16
	AccessibilityLevel int16
	TotalVotes         int32
	TotalPoints        int32
	TotalFavorites     int32
	CategoryID         int16
	Hours              []byte
}

const countPois = `-- name: CountPois :one
SELECT COUNT(*) FROM pois
`

func (q *Queries) CountPois(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countPois)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPoiMedia = `-- name: CreatePoiMedia :one
INSERT INTO media (
  poi_id,
  url,
  alt,
  index
) VALUES (
  $1,
  $2,
  $3,
  $4
) RETURNING id, poi_id, url, alt, index, created_at
`

type CreatePoiMediaParams struct {
	PoiID string
	Url   string
	Alt   string
	Index int16
}

func (q *Queries) CreatePoiMedia(ctx context.Context, arg CreatePoiMediaParams) (Medium, error) {
	row := q.db.QueryRow(ctx, createPoiMedia,
		arg.PoiID,
		arg.Url,
		arg.Alt,
		arg.Index,
	)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.PoiID,
		&i.Url,
		&i.Alt,
		&i.Index,
		&i.CreatedAt,
	)
	return i, err
}

const deletePoiAllAmenities = `-- name: DeletePoiAllAmenities :exec
DELETE FROM amenities_pois
WHERE poi_id = $1
`

func (q *Queries) DeletePoiAllAmenities(ctx context.Context, poiID string) error {
	_, err := q.db.Exec(ctx, deletePoiAllAmenities, poiID)
	return err
}

const getFavoritePoisIds = `-- name: GetFavoritePoisIds :many
SELECT 
  id 
FROM 
  pois 
ORDER BY total_favorites DESC 
LIMIT 25
`

func (q *Queries) GetFavoritePoisIds(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getFavoritePoisIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeaturedPoisIds = `-- name: GetFeaturedPoisIds :many
SELECT 
  id 
FROM 
  pois
WHERE total_votes != 0
ORDER BY total_points / total_votes DESC, total_votes DESC
LIMIT 25
`

func (q *Queries) GetFeaturedPoisIds(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getFeaturedPoisIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewPoisIds = `-- name: GetNewPoisIds :many
SELECT 
  id 
FROM 
  pois
ORDER BY created_at DESC
LIMIT 25
`

func (q *Queries) GetNewPoisIds(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getNewPoisIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedPoiIds = `-- name: GetPaginatedPoiIds :many
SELECT id FROM pois
ORDER BY created_at ASC
OFFSET $1
LIMIT $2
`

type GetPaginatedPoiIdsParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetPaginatedPoiIds(ctx context.Context, arg GetPaginatedPoiIdsParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getPaginatedPoiIds, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPoisByIdsPopulated = `-- name: GetPoisByIdsPopulated :many
SELECT get_pois($1::TEXT[])
`

func (q *Queries) GetPoisByIdsPopulated(ctx context.Context, dollar_1 []string) ([][]byte, error) {
	rows, err := q.db.Query(ctx, getPoisByIdsPopulated, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items [][]byte
	for rows.Next() {
		var get_pois []byte
		if err := rows.Scan(&get_pois); err != nil {
			return nil, err
		}
		items = append(items, get_pois)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPopularPoisIds = `-- name: GetPopularPoisIds :many
SELECT 
  id 
FROM 
  pois
ORDER BY total_votes DESC
LIMIT 25
`

func (q *Queries) GetPopularPoisIds(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getPopularPoisIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementTotalPoints = `-- name: IncrementTotalPoints :exec
UPDATE pois
SET total_points = total_points + $2
WHERE id = $1
`

type IncrementTotalPointsParams struct {
	ID          string
	TotalPoints int32
}

func (q *Queries) IncrementTotalPoints(ctx context.Context, arg IncrementTotalPointsParams) error {
	_, err := q.db.Exec(ctx, incrementTotalPoints, arg.ID, arg.TotalPoints)
	return err
}

const incrementTotalVotes = `-- name: IncrementTotalVotes :exec
UPDATE pois
SET total_votes = total_votes + 1
WHERE id = $1
`

func (q *Queries) IncrementTotalVotes(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, incrementTotalVotes, id)
	return err
}

const randSelectPoiIds = `-- name: RandSelectPoiIds :many
SELECT id
FROM pois
ORDER BY RANDOM()
LIMIT $1
`

func (q *Queries) RandSelectPoiIds(ctx context.Context, limit int32) ([]string, error) {
	rows, err := q.db.Query(ctx, randSelectPoiIds, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePoiHours = `-- name: UpdatePoiHours :exec
UPDATE pois
SET hours = $1
WHERE id = $2
`

type UpdatePoiHoursParams struct {
	Hours []byte
	ID    string
}

func (q *Queries) UpdatePoiHours(ctx context.Context, arg UpdatePoiHoursParams) error {
	_, err := q.db.Exec(ctx, updatePoiHours, arg.Hours, arg.ID)
	return err
}

const updatePoiInfo = `-- name: UpdatePoiInfo :exec
UPDATE pois
SET
  name = $1,
  category_id = $2,
  description = $3,
  phone = $4,
  website = $5,
  accessibility_level = $6,
  price_level = $7
WHERE id = $8
`

type UpdatePoiInfoParams struct {
	Name               string
	CategoryID         int16
	Description        string
	Phone              pgtype.Text
	Website            pgtype.Text
	AccessibilityLevel int16
	PriceLevel         int16
	ID                 string
}

func (q *Queries) UpdatePoiInfo(ctx context.Context, arg UpdatePoiInfoParams) error {
	_, err := q.db.Exec(ctx, updatePoiInfo,
		arg.Name,
		arg.CategoryID,
		arg.Description,
		arg.Phone,
		arg.Website,
		arg.AccessibilityLevel,
		arg.PriceLevel,
		arg.ID,
	)
	return err
}
