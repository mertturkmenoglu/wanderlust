// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: places.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

type BatchCreatePlacesParams struct {
	ID                 string
	Name               string
	Phone              pgtype.Text
	Description        string
	Website            pgtype.Text
	AddressID          int32
	CategoryID         int16
	PriceLevel         int16
	AccessibilityLevel int16
	Hours              pgtype.Hstore
	Amenities          pgtype.Hstore
}

const countPlaces = `-- name: CountPlaces :one
SELECT COUNT(*) FROM places
`

func (q *Queries) CountPlaces(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countPlaces)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const decrementPlaceTotalFavorites = `-- name: DecrementPlaceTotalFavorites :execresult
UPDATE places
SET total_favorites = total_favorites - 1
WHERE id = $1
`

func (q *Queries) DecrementPlaceTotalFavorites(ctx context.Context, id string) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, decrementPlaceTotalFavorites, id)
}

const decrementPlaceTotalPoints = `-- name: DecrementPlaceTotalPoints :execresult
UPDATE places
SET total_points = total_points - $2
WHERE id = $1
`

type DecrementPlaceTotalPointsParams struct {
	ID          string
	TotalPoints int32
}

func (q *Queries) DecrementPlaceTotalPoints(ctx context.Context, arg DecrementPlaceTotalPointsParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, decrementPlaceTotalPoints, arg.ID, arg.TotalPoints)
}

const decrementPlaceTotalVotes = `-- name: DecrementPlaceTotalVotes :execresult
UPDATE places
SET total_votes = total_votes - 1
WHERE id = $1
`

func (q *Queries) DecrementPlaceTotalVotes(ctx context.Context, id string) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, decrementPlaceTotalVotes, id)
}

const findManyFavoritePlaceIds = `-- name: FindManyFavoritePlaceIds :many
SELECT id
FROM places
ORDER BY total_favorites DESC
LIMIT 25
`

func (q *Queries) FindManyFavoritePlaceIds(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, findManyFavoritePlaceIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findManyFeaturedPlaceIds = `-- name: FindManyFeaturedPlaceIds :many
SELECT id
FROM places
WHERE total_votes != 0
ORDER BY total_points / total_votes DESC, total_votes DESC
LIMIT 25
`

func (q *Queries) FindManyFeaturedPlaceIds(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, findManyFeaturedPlaceIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findManyNewPlaceIds = `-- name: FindManyNewPlaceIds :many
SELECT id
FROM places
ORDER BY created_at DESC
LIMIT 25
`

func (q *Queries) FindManyNewPlaceIds(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, findManyNewPlaceIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findManyPlaceIds = `-- name: FindManyPlaceIds :many
SELECT id
FROM places
ORDER BY created_at ASC
OFFSET $1
LIMIT $2
`

type FindManyPlaceIdsParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) FindManyPlaceIds(ctx context.Context, arg FindManyPlaceIdsParams) ([]string, error) {
	rows, err := q.db.Query(ctx, findManyPlaceIds, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findManyPlaceIdsByRand = `-- name: FindManyPlaceIdsByRand :many
SELECT id
FROM places
ORDER BY RANDOM()
LIMIT $1
`

func (q *Queries) FindManyPlaceIdsByRand(ctx context.Context, limit int32) ([]string, error) {
	rows, err := q.db.Query(ctx, findManyPlaceIdsByRand, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findManyPlacesPopulated = `-- name: FindManyPlacesPopulated :many
SELECT get_places($1::TEXT[])
`

func (q *Queries) FindManyPlacesPopulated(ctx context.Context, dollar_1 []string) ([][]byte, error) {
	rows, err := q.db.Query(ctx, findManyPlacesPopulated, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items [][]byte
	for rows.Next() {
		var get_places []byte
		if err := rows.Scan(&get_places); err != nil {
			return nil, err
		}
		items = append(items, get_places)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findManyPopularPlaceIds = `-- name: FindManyPopularPlaceIds :many
SELECT id
FROM places
ORDER BY total_votes DESC
LIMIT 25
`

func (q *Queries) FindManyPopularPlaceIds(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, findManyPopularPlaceIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementPlaceTotalFavorites = `-- name: IncrementPlaceTotalFavorites :execresult
UPDATE places
SET total_favorites = total_favorites + 1
WHERE id = $1
`

func (q *Queries) IncrementPlaceTotalFavorites(ctx context.Context, id string) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, incrementPlaceTotalFavorites, id)
}

const incrementPlaceTotalPoints = `-- name: IncrementPlaceTotalPoints :execresult
UPDATE places
SET total_points = total_points + $2
WHERE id = $1
`

type IncrementPlaceTotalPointsParams struct {
	ID          string
	TotalPoints int32
}

func (q *Queries) IncrementPlaceTotalPoints(ctx context.Context, arg IncrementPlaceTotalPointsParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, incrementPlaceTotalPoints, arg.ID, arg.TotalPoints)
}

const incrementPlaceTotalVotes = `-- name: IncrementPlaceTotalVotes :execresult
UPDATE places
SET total_votes = total_votes + 1
WHERE id = $1
`

func (q *Queries) IncrementPlaceTotalVotes(ctx context.Context, id string) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, incrementPlaceTotalVotes, id)
}

const updatePlaceAmenities = `-- name: UpdatePlaceAmenities :execresult
UPDATE places
SET amenities = $2
WHERE id = $1
`

type UpdatePlaceAmenitiesParams struct {
	ID        string
	Amenities pgtype.Hstore
}

func (q *Queries) UpdatePlaceAmenities(ctx context.Context, arg UpdatePlaceAmenitiesParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updatePlaceAmenities, arg.ID, arg.Amenities)
}

const updatePlaceHours = `-- name: UpdatePlaceHours :execresult
UPDATE places
SET hours = $2
WHERE id = $1
`

type UpdatePlaceHoursParams struct {
	ID    string
	Hours pgtype.Hstore
}

func (q *Queries) UpdatePlaceHours(ctx context.Context, arg UpdatePlaceHoursParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updatePlaceHours, arg.ID, arg.Hours)
}

const updatePlaceInfo = `-- name: UpdatePlaceInfo :execresult
UPDATE places
SET
  name = $1,
  category_id = $2,
  description = $3,
  phone = $4,
  website = $5,
  accessibility_level = $6,
  price_level = $7
WHERE id = $8
`

type UpdatePlaceInfoParams struct {
	Name               string
	CategoryID         int16
	Description        string
	Phone              pgtype.Text
	Website            pgtype.Text
	AccessibilityLevel int16
	PriceLevel         int16
	ID                 string
}

func (q *Queries) UpdatePlaceInfo(ctx context.Context, arg UpdatePlaceInfoParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updatePlaceInfo,
		arg.Name,
		arg.CategoryID,
		arg.Description,
		arg.Phone,
		arg.Website,
		arg.AccessibilityLevel,
		arg.PriceLevel,
		arg.ID,
	)
}

const updatePlaceRatingsAndVotes = `-- name: UpdatePlaceRatingsAndVotes :execresult
UPDATE places
SET total_points = $2, total_votes = $3
WHERE id = $1
`

type UpdatePlaceRatingsAndVotesParams struct {
	ID          string
	TotalPoints int32
	TotalVotes  int32
}

func (q *Queries) UpdatePlaceRatingsAndVotes(ctx context.Context, arg UpdatePlaceRatingsAndVotesParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updatePlaceRatingsAndVotes, arg.ID, arg.TotalPoints, arg.TotalVotes)
}

const updatePlaceTotalFavorites = `-- name: UpdatePlaceTotalFavorites :execresult
UPDATE places
SET total_favorites = $2
WHERE id = $1
`

type UpdatePlaceTotalFavoritesParams struct {
	ID             string
	TotalFavorites int32
}

func (q *Queries) UpdatePlaceTotalFavorites(ctx context.Context, arg UpdatePlaceTotalFavoritesParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updatePlaceTotalFavorites, arg.ID, arg.TotalFavorites)
}
