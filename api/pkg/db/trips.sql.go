// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: trips.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTrip = `-- name: CreateTrip :one
INSERT INTO trips (
  id,
  owner_id,
  status,
  visibility_level,
  start_at,
  end_at
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
) RETURNING id, owner_id, status, visibility_level, start_at, end_at, created_at, updated_at
`

type CreateTripParams struct {
	ID              string
	OwnerID         string
	Status          string
	VisibilityLevel string
	StartAt         pgtype.Timestamptz
	EndAt           pgtype.Timestamptz
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (Trip, error) {
	row := q.db.QueryRow(ctx, createTrip,
		arg.ID,
		arg.OwnerID,
		arg.Status,
		arg.VisibilityLevel,
		arg.StartAt,
		arg.EndAt,
	)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Status,
		&i.VisibilityLevel,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTripById = `-- name: GetTripById :one
SELECT id, owner_id, status, visibility_level, start_at, end_at, created_at, updated_at FROM trips WHERE id = $1
`

func (q *Queries) GetTripById(ctx context.Context, id string) (Trip, error) {
	row := q.db.QueryRow(ctx, getTripById, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Status,
		&i.VisibilityLevel,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
