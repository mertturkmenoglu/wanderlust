// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: trips.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const addParticipantToTrip = `-- name: AddParticipantToTrip :one
INSERT INTO trip_participants (
  id,
  user_id,
  trip_id,
  role
) VALUES (
  $1,
  $2,
  $3,
  $4
) RETURNING id, trip_id, user_id, role
`

type AddParticipantToTripParams struct {
	ID     string
	UserID string
	TripID string
	Role   string
}

func (q *Queries) AddParticipantToTrip(ctx context.Context, arg AddParticipantToTripParams) (TripParticipant, error) {
	row := q.db.QueryRow(ctx, addParticipantToTrip,
		arg.ID,
		arg.UserID,
		arg.TripID,
		arg.Role,
	)
	var i TripParticipant
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.UserID,
		&i.Role,
	)
	return i, err
}

type BatchCreateTripAmenitiesParams struct {
	TripID    string
	AmenityID int32
}

type BatchCreateTripsParams struct {
	ID              string
	OwnerID         string
	Status          string
	Description     string
	Title           string
	VisibilityLevel string
	StartAt         pgtype.Timestamptz
	EndAt           pgtype.Timestamptz
}

const createTrip = `-- name: CreateTrip :one
INSERT INTO trips (
  id,
  owner_id,
  title,
  description,
  status,
  visibility_level,
  start_at,
  end_at
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8
) RETURNING id, owner_id, status, title, description, visibility_level, start_at, end_at, created_at, updated_at
`

type CreateTripParams struct {
	ID              string
	OwnerID         string
	Title           string
	Description     string
	Status          string
	VisibilityLevel string
	StartAt         pgtype.Timestamptz
	EndAt           pgtype.Timestamptz
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (Trip, error) {
	row := q.db.QueryRow(ctx, createTrip,
		arg.ID,
		arg.OwnerID,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.VisibilityLevel,
		arg.StartAt,
		arg.EndAt,
	)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Status,
		&i.Title,
		&i.Description,
		&i.VisibilityLevel,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTripComment = `-- name: CreateTripComment :one
INSERT INTO trip_comments (
  id,
  trip_id,
  from_id,
  content,
  created_at
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING id, trip_id, from_id, content, created_at
`

type CreateTripCommentParams struct {
	ID        string
	TripID    string
	FromID    string
	Content   string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateTripComment(ctx context.Context, arg CreateTripCommentParams) (TripComment, error) {
	row := q.db.QueryRow(ctx, createTripComment,
		arg.ID,
		arg.TripID,
		arg.FromID,
		arg.Content,
		arg.CreatedAt,
	)
	var i TripComment
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.FromID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const createTripInvite = `-- name: CreateTripInvite :one
INSERT INTO trip_invites (
  id,
  trip_id,
  from_id,
  to_id,
  sent_at,
  expires_at,
  trip_title,
  trip_description,
  role
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9
) RETURNING id, trip_id, from_id, to_id, sent_at, expires_at, trip_title, trip_description, role
`

type CreateTripInviteParams struct {
	ID              string
	TripID          string
	FromID          string
	ToID            string
	SentAt          pgtype.Timestamptz
	ExpiresAt       pgtype.Timestamptz
	TripTitle       string
	TripDescription string
	Role            string
}

func (q *Queries) CreateTripInvite(ctx context.Context, arg CreateTripInviteParams) (TripInvite, error) {
	row := q.db.QueryRow(ctx, createTripInvite,
		arg.ID,
		arg.TripID,
		arg.FromID,
		arg.ToID,
		arg.SentAt,
		arg.ExpiresAt,
		arg.TripTitle,
		arg.TripDescription,
		arg.Role,
	)
	var i TripInvite
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.FromID,
		&i.ToID,
		&i.SentAt,
		&i.ExpiresAt,
		&i.TripTitle,
		&i.TripDescription,
		&i.Role,
	)
	return i, err
}

const createTripLocation = `-- name: CreateTripLocation :one
INSERT INTO trip_locations (
  id,
  trip_id,
  poi_id,
  scheduled_time,
  description
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING id, trip_id, scheduled_time, poi_id, description
`

type CreateTripLocationParams struct {
	ID            string
	TripID        string
	PoiID         string
	ScheduledTime pgtype.Timestamptz
	Description   string
}

func (q *Queries) CreateTripLocation(ctx context.Context, arg CreateTripLocationParams) (TripLocation, error) {
	row := q.db.QueryRow(ctx, createTripLocation,
		arg.ID,
		arg.TripID,
		arg.PoiID,
		arg.ScheduledTime,
		arg.Description,
	)
	var i TripLocation
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.ScheduledTime,
		&i.PoiID,
		&i.Description,
	)
	return i, err
}

const deleteInvite = `-- name: DeleteInvite :exec
DELETE FROM trip_invites WHERE id = $1
`

func (q *Queries) DeleteInvite(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteInvite, id)
	return err
}

const deleteParticipant = `-- name: DeleteParticipant :exec
DELETE FROM trip_participants WHERE trip_id = $1 AND user_id = $2
`

type DeleteParticipantParams struct {
	TripID string
	UserID string
}

func (q *Queries) DeleteParticipant(ctx context.Context, arg DeleteParticipantParams) error {
	_, err := q.db.Exec(ctx, deleteParticipant, arg.TripID, arg.UserID)
	return err
}

const deleteTrip = `-- name: DeleteTrip :exec
DELETE FROM trips WHERE id = $1
`

func (q *Queries) DeleteTrip(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteTrip, id)
	return err
}

const deleteTripAllAmenities = `-- name: DeleteTripAllAmenities :exec
DELETE FROM trip_amenities WHERE trip_id = $1
`

func (q *Queries) DeleteTripAllAmenities(ctx context.Context, tripID string) error {
	_, err := q.db.Exec(ctx, deleteTripAllAmenities, tripID)
	return err
}

const deleteTripAllComments = `-- name: DeleteTripAllComments :exec
DELETE FROM trip_comments WHERE trip_id = $1
`

func (q *Queries) DeleteTripAllComments(ctx context.Context, tripID string) error {
	_, err := q.db.Exec(ctx, deleteTripAllComments, tripID)
	return err
}

const deleteTripAllInvites = `-- name: DeleteTripAllInvites :exec
DELETE FROM trip_invites WHERE trip_id = $1
`

func (q *Queries) DeleteTripAllInvites(ctx context.Context, tripID string) error {
	_, err := q.db.Exec(ctx, deleteTripAllInvites, tripID)
	return err
}

const deleteTripAllParticipants = `-- name: DeleteTripAllParticipants :exec
DELETE FROM trip_participants WHERE trip_id = $1
`

func (q *Queries) DeleteTripAllParticipants(ctx context.Context, tripID string) error {
	_, err := q.db.Exec(ctx, deleteTripAllParticipants, tripID)
	return err
}

const deleteTripComment = `-- name: DeleteTripComment :exec
DELETE FROM trip_comments WHERE id = $1
`

func (q *Queries) DeleteTripComment(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteTripComment, id)
	return err
}

const deleteTripLocation = `-- name: DeleteTripLocation :execresult
DELETE FROM trip_locations WHERE id = $1
`

func (q *Queries) DeleteTripLocation(ctx context.Context, id string) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteTripLocation, id)
}

const getAllTripsIds = `-- name: GetAllTripsIds :many
SELECT DISTINCT trips.id, trips.created_at
FROM trips
LEFT JOIN trip_participants tp ON tp.trip_id = trips.id
WHERE trips.owner_id = $1 OR tp.user_id = $1
ORDER BY trips.created_at DESC
`

type GetAllTripsIdsRow struct {
	ID        string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) GetAllTripsIds(ctx context.Context, ownerID string) ([]GetAllTripsIdsRow, error) {
	rows, err := q.db.Query(ctx, getAllTripsIds, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTripsIdsRow
	for rows.Next() {
		var i GetAllTripsIdsRow
		if err := rows.Scan(&i.ID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvitesByToUserId = `-- name: GetInvitesByToUserId :many
SELECT
  invites.id, invites.trip_id, invites.from_id, invites.to_id, invites.sent_at, invites.expires_at, invites.trip_title, invites.trip_description, invites.role,
  jsonb_build_object(
    'id', p.id,
    'fullName', p.full_name,
    'username', p.username,
    'profileImage', p.profile_image
  ) AS fromUser
FROM trip_invites invites
JOIN profile p ON p.id = invites.from_id
WHERE invites.to_id = $1
ORDER BY invites.sent_at DESC
`

type GetInvitesByToUserIdRow struct {
	TripInvite TripInvite
	Fromuser   []byte
}

func (q *Queries) GetInvitesByToUserId(ctx context.Context, toID string) ([]GetInvitesByToUserIdRow, error) {
	rows, err := q.db.Query(ctx, getInvitesByToUserId, toID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInvitesByToUserIdRow
	for rows.Next() {
		var i GetInvitesByToUserIdRow
		if err := rows.Scan(
			&i.TripInvite.ID,
			&i.TripInvite.TripID,
			&i.TripInvite.FromID,
			&i.TripInvite.ToID,
			&i.TripInvite.SentAt,
			&i.TripInvite.ExpiresAt,
			&i.TripInvite.TripTitle,
			&i.TripInvite.TripDescription,
			&i.TripInvite.Role,
			&i.Fromuser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvitesByTripId = `-- name: GetInvitesByTripId :many
SELECT
  invites.id, invites.trip_id, invites.from_id, invites.to_id, invites.sent_at, invites.expires_at, invites.trip_title, invites.trip_description, invites.role,
  jsonb_build_object(
    'id', pfrom.id,
    'fullName', pfrom.full_name,
    'username', pfrom.username,
    'profileImage', pfrom.profile_image
  ) AS fromUser,
  jsonb_build_object(
    'id', pto.id,
    'fullName', pto.full_name,
    'username', pto.username,
    'profileImage', pto.profile_image
  ) AS toUser
FROM trip_invites invites
JOIN profile pfrom ON pfrom.id = invites.from_id
JOIN profile pto ON pto.id = invites.to_id
WHERE invites.trip_id = $1
ORDER BY invites.sent_at DESC
`

type GetInvitesByTripIdRow struct {
	TripInvite TripInvite
	Fromuser   []byte
	Touser     []byte
}

func (q *Queries) GetInvitesByTripId(ctx context.Context, tripID string) ([]GetInvitesByTripIdRow, error) {
	rows, err := q.db.Query(ctx, getInvitesByTripId, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInvitesByTripIdRow
	for rows.Next() {
		var i GetInvitesByTripIdRow
		if err := rows.Scan(
			&i.TripInvite.ID,
			&i.TripInvite.TripID,
			&i.TripInvite.FromID,
			&i.TripInvite.ToID,
			&i.TripInvite.SentAt,
			&i.TripInvite.ExpiresAt,
			&i.TripInvite.TripTitle,
			&i.TripInvite.TripDescription,
			&i.TripInvite.Role,
			&i.Fromuser,
			&i.Touser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTripById = `-- name: GetTripById :one
SELECT id, owner_id, status, title, description, visibility_level, start_at, end_at, created_at, updated_at FROM trips WHERE id = $1
`

func (q *Queries) GetTripById(ctx context.Context, id string) (Trip, error) {
	row := q.db.QueryRow(ctx, getTripById, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Status,
		&i.Title,
		&i.Description,
		&i.VisibilityLevel,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTripCommentById = `-- name: GetTripCommentById :one
SELECT
  tc.id, tc.trip_id, tc.from_id, tc.content, tc.created_at,
  (SELECT jsonb_build_object(
    'id', u.id,
    'fullName', u.full_name,
    'username', u.username,
    'profileImage', u.profile_image
  )) AS user
FROM
  trip_comments tc
LEFT JOIN users u ON u.id = tc.from_id
WHERE tc.id = $1
`

type GetTripCommentByIdRow struct {
	TripComment TripComment
	User        []byte
}

func (q *Queries) GetTripCommentById(ctx context.Context, id string) (GetTripCommentByIdRow, error) {
	row := q.db.QueryRow(ctx, getTripCommentById, id)
	var i GetTripCommentByIdRow
	err := row.Scan(
		&i.TripComment.ID,
		&i.TripComment.TripID,
		&i.TripComment.FromID,
		&i.TripComment.Content,
		&i.TripComment.CreatedAt,
		&i.User,
	)
	return i, err
}

const getTripComments = `-- name: GetTripComments :many
SELECT
  tc.id, tc.trip_id, tc.from_id, tc.content, tc.created_at,
  (SELECT jsonb_build_object(
    'id', u.id,
    'fullName', u.full_name,
    'username', u.username,
    'profileImage', u.profile_image
  )) AS user
FROM
  trip_comments tc
LEFT JOIN users u ON u.id = tc.from_id
WHERE
  tc.trip_id = $1
ORDER BY tc.created_at DESC
OFFSET $2
LIMIT $3
`

type GetTripCommentsParams struct {
	TripID string
	Offset int32
	Limit  int32
}

type GetTripCommentsRow struct {
	TripComment TripComment
	User        []byte
}

func (q *Queries) GetTripComments(ctx context.Context, arg GetTripCommentsParams) ([]GetTripCommentsRow, error) {
	rows, err := q.db.Query(ctx, getTripComments, arg.TripID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTripCommentsRow
	for rows.Next() {
		var i GetTripCommentsRow
		if err := rows.Scan(
			&i.TripComment.ID,
			&i.TripComment.TripID,
			&i.TripComment.FromID,
			&i.TripComment.Content,
			&i.TripComment.CreatedAt,
			&i.User,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTripCommentsCount = `-- name: GetTripCommentsCount :one
SELECT COUNT(*) FROM trip_comments WHERE trip_id = $1
`

func (q *Queries) GetTripCommentsCount(ctx context.Context, tripID string) (int64, error) {
	row := q.db.QueryRow(ctx, getTripCommentsCount, tripID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTripLocationById = `-- name: GetTripLocationById :one
SELECT
  tl.id, tl.trip_id, tl.scheduled_time, tl.poi_id, tl.description
FROM trip_locations tl
WHERE tl.id = $1
LIMIT 1
`

type GetTripLocationByIdRow struct {
	TripLocation TripLocation
}

func (q *Queries) GetTripLocationById(ctx context.Context, id string) (GetTripLocationByIdRow, error) {
	row := q.db.QueryRow(ctx, getTripLocationById, id)
	var i GetTripLocationByIdRow
	err := row.Scan(
		&i.TripLocation.ID,
		&i.TripLocation.TripID,
		&i.TripLocation.ScheduledTime,
		&i.TripLocation.PoiID,
		&i.TripLocation.Description,
	)
	return i, err
}

const getTripsByIdsPopulated = `-- name: GetTripsByIdsPopulated :many
SELECT
  trips.id, trips.owner_id, trips.status, trips.title, trips.description, trips.visibility_level, trips.start_at, trips.end_at, trips.created_at, trips.updated_at,
  jsonb_build_object(
    'id', u.id,
    'fullName', u.full_name,
    'username', u.username,
    'profileImage', u.profile_image
  ) AS owner,
  (SELECT json_agg(DISTINCT jsonb_build_object(
    'id', par.id,
    'fullName', par.full_name,
    'username', par.username,
    'profileImage', par.profile_image,
    'role', tp.role
  ))
  FROM trip_participants tp
  JOIN profile par ON par.id = tp.user_id
  WHERE tp.trip_id = trips.id
  ) AS participants,
  (SELECT json_agg(to_jsonb(am.*))
  FROM trip_amenities ta
  JOIN amenities am ON am.id = ta.amenity_id
  WHERE ta.trip_id = trips.id
  ) AS amenities,
  (SELECT json_agg(jsonb_build_object(
    'id', tlocations.id,
    'tripId', tlocations.trip_id,
    'scheduledTime', tlocations.scheduled_time,
    'poiId', tlocations.poi_id,
    'description', tlocations.description
  ))
  FROM trip_locations tlocations
  WHERE tlocations.trip_id = trips.id
  ) AS locations,
  COALESCE(json_agg(DISTINCT jsonb_build_object(
    'poi', to_jsonb(poi.*),
    'poiCategory', to_jsonb(cat.*),
    'poiAddress', to_jsonb(addr.*),
    'poiCity', to_jsonb(cities.*),
    'poiAmenities', COALESCE(poi_amenities.amenities, '[]'),
    'poiMedia', COALESCE(poi_media.media, '[]')
  )) FILTER (WHERE trip_locations.poi_id IS NOT NULL), '[]') AS ps
FROM trips
LEFT JOIN users u ON u.id = trips.owner_id
LEFT JOIN trip_locations ON trip_locations.trip_id = trips.id
LEFT JOIN pois poi ON poi.id = trip_locations.poi_id
LEFT JOIN categories cat ON cat.id = poi.category_id
LEFT JOIN addresses addr ON addr.id = poi.address_id
LEFT JOIN cities ON cities.id = addr.city_id
LEFT JOIN LATERAL (
  SELECT json_agg(to_jsonb(a.*)) AS amenities
  FROM amenities_pois pa
  JOIN amenities a ON a.id = pa.amenity_id
  WHERE pa.poi_id = poi.id
) AS poi_amenities ON TRUE
LEFT JOIN LATERAL (
  SELECT json_agg(to_jsonb(pm.*)) AS media
  FROM media pm
  WHERE pm.poi_id = poi.id
) AS poi_media ON TRUE
WHERE trips.id = ANY($1::TEXT[])
GROUP BY trips.id, u.id
ORDER BY trips.created_at DESC
`

type GetTripsByIdsPopulatedRow struct {
	Trip         Trip
	Owner        []byte
	Participants []byte
	Amenities    []byte
	Locations    []byte
	Ps           interface{}
}

func (q *Queries) GetTripsByIdsPopulated(ctx context.Context, dollar_1 []string) ([]GetTripsByIdsPopulatedRow, error) {
	rows, err := q.db.Query(ctx, getTripsByIdsPopulated, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTripsByIdsPopulatedRow
	for rows.Next() {
		var i GetTripsByIdsPopulatedRow
		if err := rows.Scan(
			&i.Trip.ID,
			&i.Trip.OwnerID,
			&i.Trip.Status,
			&i.Trip.Title,
			&i.Trip.Description,
			&i.Trip.VisibilityLevel,
			&i.Trip.StartAt,
			&i.Trip.EndAt,
			&i.Trip.CreatedAt,
			&i.Trip.UpdatedAt,
			&i.Owner,
			&i.Participants,
			&i.Amenities,
			&i.Locations,
			&i.Ps,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const moveDanglingLocations = `-- name: MoveDanglingLocations :exec
UPDATE trip_locations
SET scheduled_time = $1
WHERE trip_id = $2 AND (scheduled_time < $3 OR scheduled_time > $4)
`

type MoveDanglingLocationsParams struct {
	ScheduledTime   pgtype.Timestamptz
	TripID          string
	ScheduledTime_2 pgtype.Timestamptz
	ScheduledTime_3 pgtype.Timestamptz
}

func (q *Queries) MoveDanglingLocations(ctx context.Context, arg MoveDanglingLocationsParams) error {
	_, err := q.db.Exec(ctx, moveDanglingLocations,
		arg.ScheduledTime,
		arg.TripID,
		arg.ScheduledTime_2,
		arg.ScheduledTime_3,
	)
	return err
}

const updateTrip = `-- name: UpdateTrip :one
UPDATE trips
SET
  title = $2,
  description = $3,
  visibility_level = $4,
  start_at = $5,
  end_at = $6
WHERE id = $1
RETURNING id, owner_id, status, title, description, visibility_level, start_at, end_at, created_at, updated_at
`

type UpdateTripParams struct {
	ID              string
	Title           string
	Description     string
	VisibilityLevel string
	StartAt         pgtype.Timestamptz
	EndAt           pgtype.Timestamptz
}

func (q *Queries) UpdateTrip(ctx context.Context, arg UpdateTripParams) (Trip, error) {
	row := q.db.QueryRow(ctx, updateTrip,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.VisibilityLevel,
		arg.StartAt,
		arg.EndAt,
	)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Status,
		&i.Title,
		&i.Description,
		&i.VisibilityLevel,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTripComment = `-- name: UpdateTripComment :one
UPDATE trip_comments 
SET content = $2 
WHERE id = $1 AND trip_id = $3
RETURNING id, trip_id, from_id, content, created_at
`

type UpdateTripCommentParams struct {
	ID      string
	Content string
	TripID  string
}

func (q *Queries) UpdateTripComment(ctx context.Context, arg UpdateTripCommentParams) (TripComment, error) {
	row := q.db.QueryRow(ctx, updateTripComment, arg.ID, arg.Content, arg.TripID)
	var i TripComment
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.FromID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const updateTripLocation = `-- name: UpdateTripLocation :one
UPDATE trip_locations
SET description = $2,
    scheduled_time = $3
WHERE id = $1 AND trip_id = $4
RETURNING id, trip_id, scheduled_time, poi_id, description
`

type UpdateTripLocationParams struct {
	ID            string
	Description   string
	ScheduledTime pgtype.Timestamptz
	TripID        string
}

func (q *Queries) UpdateTripLocation(ctx context.Context, arg UpdateTripLocationParams) (TripLocation, error) {
	row := q.db.QueryRow(ctx, updateTripLocation,
		arg.ID,
		arg.Description,
		arg.ScheduledTime,
		arg.TripID,
	)
	var i TripLocation
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.ScheduledTime,
		&i.PoiID,
		&i.Description,
	)
	return i, err
}
