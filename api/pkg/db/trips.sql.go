// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: trips.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addParticipantToTrip = `-- name: AddParticipantToTrip :one
INSERT INTO trips_participants (
  id,
  user_id,
  trip_id,
  role
) VALUES (
  $1,
  $2,
  $3,
  $4
) RETURNING id, trip_id, user_id, role
`

type AddParticipantToTripParams struct {
	ID     string
	UserID string
	TripID string
	Role   string
}

func (q *Queries) AddParticipantToTrip(ctx context.Context, arg AddParticipantToTripParams) (TripsParticipant, error) {
	row := q.db.QueryRow(ctx, addParticipantToTrip,
		arg.ID,
		arg.UserID,
		arg.TripID,
		arg.Role,
	)
	var i TripsParticipant
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.UserID,
		&i.Role,
	)
	return i, err
}

type BatchCreateTripsParams struct {
	ID              string
	OwnerID         string
	Status          string
	Title           string
	VisibilityLevel string
	StartAt         pgtype.Timestamptz
	EndAt           pgtype.Timestamptz
}

const createTrip = `-- name: CreateTrip :one
INSERT INTO trips (
  id,
  owner_id,
  title,
  status,
  visibility_level,
  start_at,
  end_at
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7
) RETURNING id, owner_id, status, title, visibility_level, start_at, end_at, created_at, updated_at
`

type CreateTripParams struct {
	ID              string
	OwnerID         string
	Title           string
	Status          string
	VisibilityLevel string
	StartAt         pgtype.Timestamptz
	EndAt           pgtype.Timestamptz
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (Trip, error) {
	row := q.db.QueryRow(ctx, createTrip,
		arg.ID,
		arg.OwnerID,
		arg.Title,
		arg.Status,
		arg.VisibilityLevel,
		arg.StartAt,
		arg.EndAt,
	)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Status,
		&i.Title,
		&i.VisibilityLevel,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTripInvite = `-- name: CreateTripInvite :one
INSERT INTO trips_invites (
  id,
  trip_id,
  from_id,
  to_id,
  sent_at,
  expires_at,
  role
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7
) RETURNING id, trip_id, from_id, to_id, sent_at, expires_at, role
`

type CreateTripInviteParams struct {
	ID        string
	TripID    string
	FromID    string
	ToID      string
	SentAt    pgtype.Timestamptz
	ExpiresAt pgtype.Timestamptz
	Role      string
}

func (q *Queries) CreateTripInvite(ctx context.Context, arg CreateTripInviteParams) (TripsInvite, error) {
	row := q.db.QueryRow(ctx, createTripInvite,
		arg.ID,
		arg.TripID,
		arg.FromID,
		arg.ToID,
		arg.SentAt,
		arg.ExpiresAt,
		arg.Role,
	)
	var i TripsInvite
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.FromID,
		&i.ToID,
		&i.SentAt,
		&i.ExpiresAt,
		&i.Role,
	)
	return i, err
}

const deleteInvite = `-- name: DeleteInvite :exec
DELETE FROM trips_invites WHERE id = $1
`

func (q *Queries) DeleteInvite(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteInvite, id)
	return err
}

const getAllTripsIds = `-- name: GetAllTripsIds :many
SELECT DISTINCT trips.id, trips.created_at
FROM trips
LEFT JOIN trips_participants tp ON tp.trip_id = trips.id
WHERE trips.owner_id = $1 OR tp.user_id = $1
ORDER BY trips.created_at DESC
`

type GetAllTripsIdsRow struct {
	ID        string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) GetAllTripsIds(ctx context.Context, ownerID string) ([]GetAllTripsIdsRow, error) {
	rows, err := q.db.Query(ctx, getAllTripsIds, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTripsIdsRow
	for rows.Next() {
		var i GetAllTripsIdsRow
		if err := rows.Scan(&i.ID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvitesByToUserId = `-- name: GetInvitesByToUserId :many
SELECT
  invites.id, invites.trip_id, invites.from_id, invites.to_id, invites.sent_at, invites.expires_at, invites.role,
  jsonb_build_object(
    'id', p.id,
    'fullName', p.full_name,
    'username', p.username,
    'profileImage', p.profile_image
  ) AS fromUser
FROM trips_invites invites
JOIN profile p ON p.id = invites.from_id
WHERE invites.to_id = $1
ORDER BY invites.sent_at DESC
`

type GetInvitesByToUserIdRow struct {
	TripsInvite TripsInvite
	Fromuser    []byte
}

func (q *Queries) GetInvitesByToUserId(ctx context.Context, toID string) ([]GetInvitesByToUserIdRow, error) {
	rows, err := q.db.Query(ctx, getInvitesByToUserId, toID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInvitesByToUserIdRow
	for rows.Next() {
		var i GetInvitesByToUserIdRow
		if err := rows.Scan(
			&i.TripsInvite.ID,
			&i.TripsInvite.TripID,
			&i.TripsInvite.FromID,
			&i.TripsInvite.ToID,
			&i.TripsInvite.SentAt,
			&i.TripsInvite.ExpiresAt,
			&i.TripsInvite.Role,
			&i.Fromuser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvitesByTripId = `-- name: GetInvitesByTripId :many
SELECT
  invites.id, invites.trip_id, invites.from_id, invites.to_id, invites.sent_at, invites.expires_at, invites.role,
  jsonb_build_object(
    'id', pfrom.id,
    'fullName', pfrom.full_name,
    'username', pfrom.username,
    'profileImage', pfrom.profile_image
  ) AS fromUser,
  jsonb_build_object(
    'id', pto.id,
    'fullName', pto.full_name,
    'username', pto.username,
    'profileImage', pto.profile_image
  ) AS toUser
FROM trips_invites invites
JOIN profile pfrom ON pfrom.id = invites.from_id
JOIN profile pto ON pto.id = invites.to_id
WHERE invites.trip_id = $1
ORDER BY invites.sent_at DESC
`

type GetInvitesByTripIdRow struct {
	TripsInvite TripsInvite
	Fromuser    []byte
	Touser      []byte
}

func (q *Queries) GetInvitesByTripId(ctx context.Context, tripID string) ([]GetInvitesByTripIdRow, error) {
	rows, err := q.db.Query(ctx, getInvitesByTripId, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInvitesByTripIdRow
	for rows.Next() {
		var i GetInvitesByTripIdRow
		if err := rows.Scan(
			&i.TripsInvite.ID,
			&i.TripsInvite.TripID,
			&i.TripsInvite.FromID,
			&i.TripsInvite.ToID,
			&i.TripsInvite.SentAt,
			&i.TripsInvite.ExpiresAt,
			&i.TripsInvite.Role,
			&i.Fromuser,
			&i.Touser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTripById = `-- name: GetTripById :one
SELECT id, owner_id, status, title, visibility_level, start_at, end_at, created_at, updated_at FROM trips WHERE id = $1
`

func (q *Queries) GetTripById(ctx context.Context, id string) (Trip, error) {
	row := q.db.QueryRow(ctx, getTripById, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Status,
		&i.Title,
		&i.VisibilityLevel,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTripsByIdsPopulated = `-- name: GetTripsByIdsPopulated :many
SELECT
  trips.id, trips.owner_id, trips.status, trips.title, trips.visibility_level, trips.start_at, trips.end_at, trips.created_at, trips.updated_at,
  jsonb_build_object(
    'id', u.id,
    'fullName', u.full_name,
    'username', u.username,
    'profileImage', u.profile_image
  ) AS owner,
  (SELECT json_agg(DISTINCT jsonb_build_object(
    'id', par.id,
    'fullName', par.full_name,
    'username', par.username,
    'profileImage', par.profile_image,
    'role', tp.role
  ))
  FROM trips_participants tp
  JOIN profile par ON par.id = tp.user_id
  WHERE tp.trip_id = trips.id
  ) as participants,
  (SELECT json_agg(to_jsonb(am.*))
  FROM trips_amenities ta
  JOIN amenities am ON am.id = ta.amenity_id
  WHERE ta.trip_id = trips.id
  ) AS amenities,
  (SELECT json_agg(DISTINCT jsonb_build_object(
    'id', tc.id,
    'from', jsonb_build_object(
      'id', profile.id,
      'fullName', profile.full_name,
      'username', profile.username,
      'profileImage', profile.profile_image
    ),
    'content', tc.content,
    'createdAt', tc.created_at
  ))
  FROM trips_comments tc
  JOIN profile ON profile.id = tc.from_id
  WHERE tc.trip_id = trips.id
  ) AS comments,
  (SELECT json_agg(jsonb_build_object(
    'tripId', td.trip_id,
    'dayNo', td.day_no,
    'description', td.description
  ))
  FROM trips_days td
  WHERE td.trip_id = trips.id
  ) AS days,
  (SELECT json_agg(jsonb_build_object(
    'tripId', tdl.trip_id,
    'dayNo', tdl.day_no,
    'poiId', tdl.poi_id
  ))
  FROM trips_days_locations tdl
  WHERE tdl.trip_id = trips.id
  ) AS locations,
  COALESCE(json_agg(DISTINCT jsonb_build_object(
    'poi', to_jsonb(poi.*),
    'poiCategory', to_jsonb(cat.*),
    'poiAddress', to_jsonb(addr.*),
    'poiCity', to_jsonb(cities.*),
    'poiAmenities', COALESCE(poi_amenities.amenities, '[]'),
    'poiMedia', COALESCE(poi_media.media, '[]')
  )) FILTER (WHERE trips_days_locations.poi_id IS NOT NULL), '[]') AS ps
FROM trips
LEFT JOIN users u ON u.id = trips.owner_id
LEFT JOIN trips_days ON trips_days.trip_id = trips.id
LEFT JOIN trips_days_locations ON trips_days_locations.trip_id = trips.id AND trips_days_locations.day_no = trips_days.day_no
LEFT JOIN pois poi ON poi.id = trips_days_locations.poi_id
LEFT JOIN categories cat ON cat.id = poi.category_id
LEFT JOIN addresses addr ON addr.id = poi.address_id
LEFT JOIN cities ON cities.id = addr.city_id
LEFT JOIN LATERAL (
  SELECT json_agg(to_jsonb(a.*)) AS amenities
  FROM amenities_pois pa
  JOIN amenities a ON a.id = pa.amenity_id
  WHERE pa.poi_id = poi.id
) AS poi_amenities ON TRUE
LEFT JOIN LATERAL (
  SELECT json_agg(to_jsonb(pm.*)) AS media
  FROM media pm
  WHERE pm.poi_id = poi.id
) AS poi_media ON TRUE
WHERE trips.id = ANY($1::TEXT[])
GROUP BY trips.id, u.id
`

type GetTripsByIdsPopulatedRow struct {
	Trip         Trip
	Owner        []byte
	Participants []byte
	Amenities    []byte
	Comments     []byte
	Days         []byte
	Locations    []byte
	Ps           interface{}
}

func (q *Queries) GetTripsByIdsPopulated(ctx context.Context, dollar_1 []string) ([]GetTripsByIdsPopulatedRow, error) {
	rows, err := q.db.Query(ctx, getTripsByIdsPopulated, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTripsByIdsPopulatedRow
	for rows.Next() {
		var i GetTripsByIdsPopulatedRow
		if err := rows.Scan(
			&i.Trip.ID,
			&i.Trip.OwnerID,
			&i.Trip.Status,
			&i.Trip.Title,
			&i.Trip.VisibilityLevel,
			&i.Trip.StartAt,
			&i.Trip.EndAt,
			&i.Trip.CreatedAt,
			&i.Trip.UpdatedAt,
			&i.Owner,
			&i.Participants,
			&i.Amenities,
			&i.Comments,
			&i.Days,
			&i.Locations,
			&i.Ps,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
