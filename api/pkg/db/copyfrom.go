// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForBatchCreateAddresses implements pgx.CopyFromSource.
type iteratorForBatchCreateAddresses struct {
	rows                 []BatchCreateAddressesParams
	skippedFirstNextCall bool
}

func (r *iteratorForBatchCreateAddresses) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBatchCreateAddresses) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].CityID,
		r.rows[0].Line1,
		r.rows[0].Line2,
		r.rows[0].PostalCode,
		r.rows[0].Lat,
		r.rows[0].Lng,
	}, nil
}

func (r iteratorForBatchCreateAddresses) Err() error {
	return nil
}

func (q *Queries) BatchCreateAddresses(ctx context.Context, arg []BatchCreateAddressesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"addresses"}, []string{"city_id", "line1", "line2", "postal_code", "lat", "lng"}, &iteratorForBatchCreateAddresses{rows: arg})
}

// iteratorForBatchCreateAmenitiesPois implements pgx.CopyFromSource.
type iteratorForBatchCreateAmenitiesPois struct {
	rows                 []BatchCreateAmenitiesPoisParams
	skippedFirstNextCall bool
}

func (r *iteratorForBatchCreateAmenitiesPois) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBatchCreateAmenitiesPois) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].AmenityID,
		r.rows[0].PoiID,
	}, nil
}

func (r iteratorForBatchCreateAmenitiesPois) Err() error {
	return nil
}

func (q *Queries) BatchCreateAmenitiesPois(ctx context.Context, arg []BatchCreateAmenitiesPoisParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"amenities_pois"}, []string{"amenity_id", "poi_id"}, &iteratorForBatchCreateAmenitiesPois{rows: arg})
}

// iteratorForBatchCreatePois implements pgx.CopyFromSource.
type iteratorForBatchCreatePois struct {
	rows                 []BatchCreatePoisParams
	skippedFirstNextCall bool
}

func (r *iteratorForBatchCreatePois) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBatchCreatePois) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Name,
		r.rows[0].Phone,
		r.rows[0].Description,
		r.rows[0].AddressID,
		r.rows[0].Website,
		r.rows[0].PriceLevel,
		r.rows[0].AccessibilityLevel,
		r.rows[0].TotalVotes,
		r.rows[0].TotalPoints,
		r.rows[0].TotalFavorites,
		r.rows[0].CategoryID,
		r.rows[0].OpenTimes,
	}, nil
}

func (r iteratorForBatchCreatePois) Err() error {
	return nil
}

func (q *Queries) BatchCreatePois(ctx context.Context, arg []BatchCreatePoisParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"pois"}, []string{"id", "name", "phone", "description", "address_id", "website", "price_level", "accessibility_level", "total_votes", "total_points", "total_favorites", "category_id", "open_times"}, &iteratorForBatchCreatePois{rows: arg})
}

// iteratorForBatchCreateReviewMedia implements pgx.CopyFromSource.
type iteratorForBatchCreateReviewMedia struct {
	rows                 []BatchCreateReviewMediaParams
	skippedFirstNextCall bool
}

func (r *iteratorForBatchCreateReviewMedia) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBatchCreateReviewMedia) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ReviewID,
		r.rows[0].Url,
		r.rows[0].MediaOrder,
	}, nil
}

func (r iteratorForBatchCreateReviewMedia) Err() error {
	return nil
}

func (q *Queries) BatchCreateReviewMedia(ctx context.Context, arg []BatchCreateReviewMediaParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"review_media"}, []string{"review_id", "url", "media_order"}, &iteratorForBatchCreateReviewMedia{rows: arg})
}

// iteratorForBatchCreateReviews implements pgx.CopyFromSource.
type iteratorForBatchCreateReviews struct {
	rows                 []BatchCreateReviewsParams
	skippedFirstNextCall bool
}

func (r *iteratorForBatchCreateReviews) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBatchCreateReviews) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].PoiID,
		r.rows[0].UserID,
		r.rows[0].Content,
		r.rows[0].Rating,
	}, nil
}

func (r iteratorForBatchCreateReviews) Err() error {
	return nil
}

func (q *Queries) BatchCreateReviews(ctx context.Context, arg []BatchCreateReviewsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"reviews"}, []string{"id", "poi_id", "user_id", "content", "rating"}, &iteratorForBatchCreateReviews{rows: arg})
}

// iteratorForBatchCreateTrips implements pgx.CopyFromSource.
type iteratorForBatchCreateTrips struct {
	rows                 []BatchCreateTripsParams
	skippedFirstNextCall bool
}

func (r *iteratorForBatchCreateTrips) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBatchCreateTrips) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].OwnerID,
		r.rows[0].Status,
		r.rows[0].VisibilityLevel,
		r.rows[0].StartAt,
		r.rows[0].EndAt,
	}, nil
}

func (r iteratorForBatchCreateTrips) Err() error {
	return nil
}

func (q *Queries) BatchCreateTrips(ctx context.Context, arg []BatchCreateTripsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"trips"}, []string{"id", "owner_id", "status", "visibility_level", "start_at", "end_at"}, &iteratorForBatchCreateTrips{rows: arg})
}

// iteratorForBatchCreateUsers implements pgx.CopyFromSource.
type iteratorForBatchCreateUsers struct {
	rows                 []BatchCreateUsersParams
	skippedFirstNextCall bool
}

func (r *iteratorForBatchCreateUsers) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBatchCreateUsers) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Email,
		r.rows[0].Username,
		r.rows[0].FullName,
		r.rows[0].PasswordHash,
		r.rows[0].GoogleID,
		r.rows[0].FbID,
		r.rows[0].IsEmailVerified,
		r.rows[0].IsOnboardingCompleted,
		r.rows[0].ProfileImage,
	}, nil
}

func (r iteratorForBatchCreateUsers) Err() error {
	return nil
}

func (q *Queries) BatchCreateUsers(ctx context.Context, arg []BatchCreateUsersParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"users"}, []string{"id", "email", "username", "full_name", "password_hash", "google_id", "fb_id", "is_email_verified", "is_onboarding_completed", "profile_image"}, &iteratorForBatchCreateUsers{rows: arg})
}

// iteratorForCreateCities implements pgx.CopyFromSource.
type iteratorForCreateCities struct {
	rows                 []CreateCitiesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateCities) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateCities) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Name,
		r.rows[0].StateCode,
		r.rows[0].StateName,
		r.rows[0].CountryCode,
		r.rows[0].CountryName,
		r.rows[0].ImageUrl,
		r.rows[0].Latitude,
		r.rows[0].Longitude,
		r.rows[0].Description,
		r.rows[0].ImgLicense,
		r.rows[0].ImgLicenseLink,
		r.rows[0].ImgAttr,
		r.rows[0].ImgAttrLink,
	}, nil
}

func (r iteratorForCreateCities) Err() error {
	return nil
}

func (q *Queries) CreateCities(ctx context.Context, arg []CreateCitiesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"cities"}, []string{"id", "name", "state_code", "state_name", "country_code", "country_name", "image_url", "latitude", "longitude", "description", "img_license", "img_license_link", "img_attr", "img_attr_link"}, &iteratorForCreateCities{rows: arg})
}
