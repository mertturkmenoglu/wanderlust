// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bookmarks.sql

package db

import (
	"context"
)

type BatchCreateBookmarksParams struct {
	UserID string
	PoiID  string
}

const countUserBookmarks = `-- name: CountUserBookmarks :one
SELECT COUNT(*) FROM bookmarks
WHERE user_id = $1
`

func (q *Queries) CountUserBookmarks(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRow(ctx, countUserBookmarks, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBookmark = `-- name: CreateBookmark :one
INSERT INTO bookmarks (
  user_id,
  poi_id
) VALUES (
  $1,
  $2
) RETURNING id, poi_id, user_id, created_at
`

type CreateBookmarkParams struct {
	UserID string
	PoiID  string
}

func (q *Queries) CreateBookmark(ctx context.Context, arg CreateBookmarkParams) (Bookmark, error) {
	row := q.db.QueryRow(ctx, createBookmark, arg.UserID, arg.PoiID)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.PoiID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBookmarkByPoiId = `-- name: DeleteBookmarkByPoiId :exec
DELETE FROM bookmarks
WHERE poi_id = $1 AND user_id = $2
`

type DeleteBookmarkByPoiIdParams struct {
	PoiID  string
	UserID string
}

func (q *Queries) DeleteBookmarkByPoiId(ctx context.Context, arg DeleteBookmarkByPoiIdParams) error {
	_, err := q.db.Exec(ctx, deleteBookmarkByPoiId, arg.PoiID, arg.UserID)
	return err
}

const getBookmarksByUserId = `-- name: GetBookmarksByUserId :many
SELECT 
  id, poi_id, user_id, created_at
FROM bookmarks
WHERE bookmarks.user_id = $1
ORDER BY bookmarks.created_at DESC
OFFSET $2
LIMIT $3
`

type GetBookmarksByUserIdParams struct {
	UserID string
	Offset int32
	Limit  int32
}

func (q *Queries) GetBookmarksByUserId(ctx context.Context, arg GetBookmarksByUserIdParams) ([]Bookmark, error) {
	rows, err := q.db.Query(ctx, getBookmarksByUserId, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bookmark
	for rows.Next() {
		var i Bookmark
		if err := rows.Scan(
			&i.ID,
			&i.PoiID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isBookmarked = `-- name: IsBookmarked :one
SELECT id FROM bookmarks
WHERE poi_id = $1 AND user_id = $2
`

type IsBookmarkedParams struct {
	PoiID  string
	UserID string
}

func (q *Queries) IsBookmarked(ctx context.Context, arg IsBookmarkedParams) (int32, error) {
	row := q.db.QueryRow(ctx, isBookmarked, arg.PoiID, arg.UserID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
