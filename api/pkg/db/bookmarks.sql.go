// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bookmarks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

type BatchCreateBookmarksParams struct {
	UserID  string
	PlaceID string
}

const countBookmarksByUserId = `-- name: CountBookmarksByUserId :one
SELECT COUNT(*) FROM bookmarks
WHERE user_id = $1
`

func (q *Queries) CountBookmarksByUserId(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRow(ctx, countBookmarksByUserId, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBookmark = `-- name: CreateBookmark :one
INSERT INTO bookmarks (
  user_id,
  place_id
) VALUES (
  $1,
  $2
) RETURNING id, place_id, user_id, created_at
`

type CreateBookmarkParams struct {
	UserID  string
	PlaceID string
}

func (q *Queries) CreateBookmark(ctx context.Context, arg CreateBookmarkParams) (Bookmark, error) {
	row := q.db.QueryRow(ctx, createBookmark, arg.UserID, arg.PlaceID)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.PlaceID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const findManyBookmarksByUserId = `-- name: FindManyBookmarksByUserId :many
SELECT
  id, place_id, user_id, created_at
FROM bookmarks
WHERE bookmarks.user_id = $1
ORDER BY bookmarks.created_at DESC
OFFSET $2
LIMIT $3
`

type FindManyBookmarksByUserIdParams struct {
	UserID string
	Offset int32
	Limit  int32
}

func (q *Queries) FindManyBookmarksByUserId(ctx context.Context, arg FindManyBookmarksByUserIdParams) ([]Bookmark, error) {
	rows, err := q.db.Query(ctx, findManyBookmarksByUserId, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bookmark
	for rows.Next() {
		var i Bookmark
		if err := rows.Scan(
			&i.ID,
			&i.PlaceID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isPlaceBookmarked = `-- name: IsPlaceBookmarked :one
SELECT EXISTS (
  SELECT 1 FROM bookmarks
  WHERE place_id = $1 AND user_id = $2
)
`

type IsPlaceBookmarkedParams struct {
	PlaceID string
	UserID  string
}

func (q *Queries) IsPlaceBookmarked(ctx context.Context, arg IsPlaceBookmarkedParams) (bool, error) {
	row := q.db.QueryRow(ctx, isPlaceBookmarked, arg.PlaceID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const removeBookmarkByPlaceIdAndUserId = `-- name: RemoveBookmarkByPlaceIdAndUserId :execresult
DELETE FROM bookmarks
WHERE place_id = $1 AND user_id = $2
`

type RemoveBookmarkByPlaceIdAndUserIdParams struct {
	PlaceID string
	UserID  string
}

func (q *Queries) RemoveBookmarkByPlaceIdAndUserId(ctx context.Context, arg RemoveBookmarkByPlaceIdAndUserIdParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, removeBookmarkByPlaceIdAndUserId, arg.PlaceID, arg.UserID)
}
