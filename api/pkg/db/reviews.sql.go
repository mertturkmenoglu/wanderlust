// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reviews.sql

package db

import (
	"context"
)

type BatchCreateReviewImageParams struct {
	ReviewID string
	Url      string
	Index    int16
}

type BatchCreateReviewsParams struct {
	ID      string
	PoiID   string
	UserID  string
	Content string
	Rating  int16
}

const countPoiReviews = `-- name: CountPoiReviews :one
SELECT COUNT(*) FROM reviews
WHERE poi_id = $1
`

func (q *Queries) CountPoiReviews(ctx context.Context, poiID string) (int64, error) {
	row := q.db.QueryRow(ctx, countPoiReviews, poiID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countReviewsByPoiId = `-- name: CountReviewsByPoiId :one
SELECT COUNT(*) FROM reviews
WHERE poi_id = $1
`

func (q *Queries) CountReviewsByPoiId(ctx context.Context, poiID string) (int64, error) {
	row := q.db.QueryRow(ctx, countReviewsByPoiId, poiID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countReviewsByUsername = `-- name: CountReviewsByUsername :one
SELECT COUNT(*) FROM reviews
WHERE user_id = (
  SELECT id FROM profile
  WHERE username = $1
)
`

func (q *Queries) CountReviewsByUsername(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRow(ctx, countReviewsByUsername, username)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (
  id,
  poi_id,
  user_id,
  content,
  rating
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING id, poi_id, user_id, content, rating, created_at, updated_at
`

type CreateReviewParams struct {
	ID      string
	PoiID   string
	UserID  string
	Content string
	Rating  int16
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRow(ctx, createReview,
		arg.ID,
		arg.PoiID,
		arg.UserID,
		arg.Content,
		arg.Rating,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.PoiID,
		&i.UserID,
		&i.Content,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews
WHERE id = $1
`

func (q *Queries) DeleteReview(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteReview, id)
	return err
}

const getLastReviewImageIndex = `-- name: GetLastReviewImageIndex :one
SELECT COALESCE(MAX(index), 0)
FROM review_images
WHERE review_id = $1
`

func (q *Queries) GetLastReviewImageIndex(ctx context.Context, reviewID string) (interface{}, error) {
	row := q.db.QueryRow(ctx, getLastReviewImageIndex, reviewID)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const getPoiRatings = `-- name: GetPoiRatings :many
SELECT rating, COUNT(rating) FROM reviews
WHERE poi_id = $1
GROUP BY rating
`

type GetPoiRatingsRow struct {
	Rating int16
	Count  int64
}

func (q *Queries) GetPoiRatings(ctx context.Context, poiID string) ([]GetPoiRatingsRow, error) {
	rows, err := q.db.Query(ctx, getPoiRatings, poiID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPoiRatingsRow
	for rows.Next() {
		var i GetPoiRatingsRow
		if err := rows.Scan(&i.Rating, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewIdsByPoiId = `-- name: GetReviewIdsByPoiId :many
SELECT 
  id
FROM reviews
WHERE poi_id = $1
ORDER BY created_at DESC
OFFSET $2
LIMIT $3
`

type GetReviewIdsByPoiIdParams struct {
	PoiID  string
	Offset int32
	Limit  int32
}

func (q *Queries) GetReviewIdsByPoiId(ctx context.Context, arg GetReviewIdsByPoiIdParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getReviewIdsByPoiId, arg.PoiID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewIdsByUsername = `-- name: GetReviewIdsByUsername :many
SELECT 
  reviews.id
FROM reviews
JOIN profile ON reviews.user_id = profile.id
WHERE profile.username = $1
ORDER BY reviews.created_at DESC
OFFSET $2
LIMIT $3
`

type GetReviewIdsByUsernameParams struct {
	Username string
	Offset   int32
	Limit    int32
}

func (q *Queries) GetReviewIdsByUsername(ctx context.Context, arg GetReviewIdsByUsernameParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getReviewIdsByUsername, arg.Username, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewImagesByPoiId = `-- name: GetReviewImagesByPoiId :many
SELECT id, review_id, url, index FROM review_images WHERE review_id IN (
  SELECT id FROM reviews WHERE poi_id = $1
  ORDER BY created_at DESC
) LIMIT 20
`

func (q *Queries) GetReviewImagesByPoiId(ctx context.Context, poiID string) ([]ReviewImage, error) {
	rows, err := q.db.Query(ctx, getReviewImagesByPoiId, poiID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReviewImage
	for rows.Next() {
		var i ReviewImage
		if err := rows.Scan(
			&i.ID,
			&i.ReviewID,
			&i.Url,
			&i.Index,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewsByIds = `-- name: GetReviewsByIds :many
SELECT
  reviews.id, reviews.poi_id, reviews.user_id, reviews.content, reviews.rating, reviews.created_at, reviews.updated_at,
  profile.id, profile.username, profile.full_name, profile.is_verified, profile.bio, profile.pronouns, profile.website, profile.profile_image, profile.banner_image, profile.followers_count, profile.following_count, profile.created_at,
  images_agg.images
FROM
  reviews
LEFT JOIN profile ON reviews.user_id = profile.id
LEFT JOIN LATERAL (
  SELECT json_agg(jsonb_build_object(
    'id', m.id,
    'reviewId', m.review_id,
    'url', m.url,
    'index', m.index
  ) ORDER BY m.index) AS images
  FROM public.review_images m
  WHERE m.review_id = reviews.id
) images_agg ON true
WHERE reviews.id = ANY($1::TEXT[])
ORDER BY reviews.created_at DESC
`

type GetReviewsByIdsRow struct {
	Review  Review
	Profile Profile
	Images  []byte
}

func (q *Queries) GetReviewsByIds(ctx context.Context, dollar_1 []string) ([]GetReviewsByIdsRow, error) {
	rows, err := q.db.Query(ctx, getReviewsByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReviewsByIdsRow
	for rows.Next() {
		var i GetReviewsByIdsRow
		if err := rows.Scan(
			&i.Review.ID,
			&i.Review.PoiID,
			&i.Review.UserID,
			&i.Review.Content,
			&i.Review.Rating,
			&i.Review.CreatedAt,
			&i.Review.UpdatedAt,
			&i.Profile.ID,
			&i.Profile.Username,
			&i.Profile.FullName,
			&i.Profile.IsVerified,
			&i.Profile.Bio,
			&i.Profile.Pronouns,
			&i.Profile.Website,
			&i.Profile.ProfileImage,
			&i.Profile.BannerImage,
			&i.Profile.FollowersCount,
			&i.Profile.FollowingCount,
			&i.Profile.CreatedAt,
			&i.Images,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
