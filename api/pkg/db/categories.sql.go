// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
  id,
  name,
  image
) VALUES (
  $1,
  $2,
  $3
) RETURNING id, name, image
`

type CreateCategoryParams struct {
	ID    int16
	Name  string
	Image string
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.ID, arg.Name, arg.Image)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Image)
	return i, err
}

const findCategoryById = `-- name: FindCategoryById :one
SELECT id, name, image
FROM categories
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindCategoryById(ctx context.Context, id int16) (Category, error) {
	row := q.db.QueryRow(ctx, findCategoryById, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Image)
	return i, err
}

const findManyCategories = `-- name: FindManyCategories :many
SELECT id, name, image FROM categories
`

func (q *Queries) FindManyCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, findManyCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name, &i.Image); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCategoryById = `-- name: RemoveCategoryById :execresult
DELETE FROM categories
WHERE id = $1
`

func (q *Queries) RemoveCategoryById(ctx context.Context, id int16) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, removeCategoryById, id)
}

const updateCategory = `-- name: UpdateCategory :execresult
UPDATE categories
SET
  name = $2,
  image = $3
WHERE id = $1
`

type UpdateCategoryParams struct {
	ID    int16
	Name  string
	Image string
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateCategory, arg.ID, arg.Name, arg.Image)
}
