# List all available commands
default:
	just --list

# Allow scripts to be executed
@allow-scripts:
	chmod u+x scripts/*.sh

# Build the project
@build:
	go build -o main ./main.go

# Setup the project
@setup: allow-scripts
	./scripts/setup.sh

# Clean the binary
@clean:
	rm -f main

# Live reload
@watch:
	air -c conf/.air.toml

# Up the Docker containers
@docker:
	docker compose up -d

# Run fake data generation script
@fake: allow-scripts
	go run . fake

# Synchronize search index with the primary database
@search:
	go run . search-sync

@ingest:
	go run . ingest
	cat tmp/ingest_test.json | jq "." > tmp/pretty.json

# Generate Go code from SQL schema
@sqlc:
	sqlc generate -f ./conf/sqlc.yaml

# Run Infisical script with given action (example, pull, push)
@env action: allow-scripts
	./scripts/infisical.sh {{action}}

# Fake data generation database id selection helper
@fake-id:
	./scripts/fake-id.sh

# Run E2E tests
@e2e-run:
	cd tests && go test -v

# Setup E2E test environment
@e2e-setup:
	docker compose -f ./docker-compose.test.yml --env-file .env.test up -d
	goose up -env=.env.test
	air -c conf/.air.toml -- --env-file=.env.test

# Teardown E2E test environment
@e2e-teardown:
	docker compose down

# Run vulnerability check tool GoSec
@gosec:
	gosec -fmt=html -out=gosec-results.html -exclude-generated ./...; open gosec-results.html

# Run Static Check
@static-check:
	staticcheck ./...

# Run Go Vet
@vet:
	go vet ./...