all: build

build:
	@echo "=> Building..."
	@go build -o main cmd/core/main.go
	@echo "=> Build completed"

# Clean the binary
clean:
	@echo "=> Removing binary..."
	@rm -f main
	@echo "=> Removed binary"

# Live reload
watch:
	@if command -v air > /dev/null; then \
		RUN_MIGRATIONS=1 air -c conf/.air.toml; \
		echo "Watching...";\
	else \
		echo "Air is not installed. Run 'go install github.com/air-verse/air@latest' to install Air";\
	fi

# Run fake data generation script
generate-fake-data:
	@go run cmd/fake/*.go

# Generate Go code from SQL schema
sqlc-generate:
	@sqlc generate -f ./conf/sqlc.yaml

# Synchronize search index with the primary database
search-sync:
	@go run cmd/search-sync/*.go

# Create a new migration
create-migration:
	@read -p "Give migration a name: " migrationname; \
	migrate create -ext sql -dir internal/pkg/db/migrations -seq $$migrationname; \
	echo "Created migration with name $$migrationname. Update sql files."

# Create example .env file
env-example:
	@echo "=> Creating example .env file..."
	@infisical secrets generate-example-env > .env.example
	@echo "=> Created example .env file"

# Pull secrets from Infisical and export secrets to .env file
env-pull:
	@echo "=> Exporting secrets to .env file..."
	@infisical export > .env
	@echo "=> Exported secrets to .env file"

# Push secrets from .env file to Infisical
env-push:
	@echo "=> Pushing secrets to Infisical..."
	@infisical secrets set --file="./.env"
	@echo "=> Pushed secrets to Infisical"
