// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: amenities.sql

package db

import (
	"context"
)

type BatchCreateAmenitiesPoisParams struct {
	AmenityID int32
	PoiID     string
}

const createAmenity = `-- name: CreateAmenity :one
INSERT INTO amenities (
  name
) VALUES (
  $1
) RETURNING id, name
`

func (q *Queries) CreateAmenity(ctx context.Context, name string) (Amenity, error) {
	row := q.db.QueryRow(ctx, createAmenity, name)
	var i Amenity
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getAllAmenities = `-- name: GetAllAmenities :many
SELECT id, name
FROM amenities
`

func (q *Queries) GetAllAmenities(ctx context.Context) ([]Amenity, error) {
	rows, err := q.db.Query(ctx, getAllAmenities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Amenity
	for rows.Next() {
		var i Amenity
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
