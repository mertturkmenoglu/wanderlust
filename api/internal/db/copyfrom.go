// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForCreateCities implements pgx.CopyFromSource.
type iteratorForCreateCities struct {
	rows                 []CreateCitiesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateCities) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateCities) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Name,
		r.rows[0].StateID,
		r.rows[0].StateCode,
		r.rows[0].StateName,
		r.rows[0].CountryID,
		r.rows[0].CountryCode,
		r.rows[0].CountryName,
		r.rows[0].Latitude,
		r.rows[0].Longitude,
		r.rows[0].WikiDataID,
	}, nil
}

func (r iteratorForCreateCities) Err() error {
	return nil
}

func (q *Queries) CreateCities(ctx context.Context, arg []CreateCitiesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"cities"}, []string{"id", "name", "state_id", "state_code", "state_name", "country_id", "country_code", "country_name", "latitude", "longitude", "wiki_data_id"}, &iteratorForCreateCities{rows: arg})
}
