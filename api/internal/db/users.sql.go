// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id,
  email,
  username,
  full_name,
  password_hash,
  google_id,
  fb_id,
  is_email_verified,
  profile_image
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9
) RETURNING id, email, username, full_name, password_hash, google_id, fb_id, is_email_verified, is_active, is_business_account, is_verified, role, password_reset_token, password_reset_expires, login_attempts, lockout_until, gender, bio, pronouns, website, phone, profile_image, banner_image, followers_count, following_count, last_login, created_at, updated_at
`

type CreateUserParams struct {
	ID              string
	Email           string
	Username        string
	FullName        string
	PasswordHash    pgtype.Text
	GoogleID        pgtype.Text
	FbID            pgtype.Text
	IsEmailVerified bool
	ProfileImage    pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.FullName,
		arg.PasswordHash,
		arg.GoogleID,
		arg.FbID,
		arg.IsEmailVerified,
		arg.ProfileImage,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.FullName,
		&i.PasswordHash,
		&i.GoogleID,
		&i.FbID,
		&i.IsEmailVerified,
		&i.IsActive,
		&i.IsBusinessAccount,
		&i.IsVerified,
		&i.Role,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
		&i.LoginAttempts,
		&i.LockoutUntil,
		&i.Gender,
		&i.Bio,
		&i.Pronouns,
		&i.Website,
		&i.Phone,
		&i.ProfileImage,
		&i.BannerImage,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, full_name, password_hash, google_id, fb_id, is_email_verified, is_active, is_business_account, is_verified, role, password_reset_token, password_reset_expires, login_attempts, lockout_until, gender, bio, pronouns, website, phone, profile_image, banner_image, followers_count, following_count, last_login, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.FullName,
		&i.PasswordHash,
		&i.GoogleID,
		&i.FbID,
		&i.IsEmailVerified,
		&i.IsActive,
		&i.IsBusinessAccount,
		&i.IsVerified,
		&i.Role,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
		&i.LoginAttempts,
		&i.LockoutUntil,
		&i.Gender,
		&i.Bio,
		&i.Pronouns,
		&i.Website,
		&i.Phone,
		&i.ProfileImage,
		&i.BannerImage,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByFbId = `-- name: GetUserByFbId :one
SELECT id, email, username, full_name, password_hash, google_id, fb_id, is_email_verified, is_active, is_business_account, is_verified, role, password_reset_token, password_reset_expires, login_attempts, lockout_until, gender, bio, pronouns, website, phone, profile_image, banner_image, followers_count, following_count, last_login, created_at, updated_at FROM users
WHERE fb_id = $1 LIMIT 1
`

func (q *Queries) GetUserByFbId(ctx context.Context, fbID pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByFbId, fbID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.FullName,
		&i.PasswordHash,
		&i.GoogleID,
		&i.FbID,
		&i.IsEmailVerified,
		&i.IsActive,
		&i.IsBusinessAccount,
		&i.IsVerified,
		&i.Role,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
		&i.LoginAttempts,
		&i.LockoutUntil,
		&i.Gender,
		&i.Bio,
		&i.Pronouns,
		&i.Website,
		&i.Phone,
		&i.ProfileImage,
		&i.BannerImage,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByGoogleId = `-- name: GetUserByGoogleId :one
SELECT id, email, username, full_name, password_hash, google_id, fb_id, is_email_verified, is_active, is_business_account, is_verified, role, password_reset_token, password_reset_expires, login_attempts, lockout_until, gender, bio, pronouns, website, phone, profile_image, banner_image, followers_count, following_count, last_login, created_at, updated_at FROM users
WHERE google_id = $1 LIMIT 1
`

func (q *Queries) GetUserByGoogleId(ctx context.Context, googleID pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByGoogleId, googleID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.FullName,
		&i.PasswordHash,
		&i.GoogleID,
		&i.FbID,
		&i.IsEmailVerified,
		&i.IsActive,
		&i.IsBusinessAccount,
		&i.IsVerified,
		&i.Role,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
		&i.LoginAttempts,
		&i.LockoutUntil,
		&i.Gender,
		&i.Bio,
		&i.Pronouns,
		&i.Website,
		&i.Phone,
		&i.ProfileImage,
		&i.BannerImage,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, username, full_name, password_hash, google_id, fb_id, is_email_verified, is_active, is_business_account, is_verified, role, password_reset_token, password_reset_expires, login_attempts, lockout_until, gender, bio, pronouns, website, phone, profile_image, banner_image, followers_count, following_count, last_login, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.FullName,
		&i.PasswordHash,
		&i.GoogleID,
		&i.FbID,
		&i.IsEmailVerified,
		&i.IsActive,
		&i.IsBusinessAccount,
		&i.IsVerified,
		&i.Role,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
		&i.LoginAttempts,
		&i.LockoutUntil,
		&i.Gender,
		&i.Bio,
		&i.Pronouns,
		&i.Website,
		&i.Phone,
		&i.ProfileImage,
		&i.BannerImage,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, username, full_name, password_hash, google_id, fb_id, is_email_verified, is_active, is_business_account, is_verified, role, password_reset_token, password_reset_expires, login_attempts, lockout_until, gender, bio, pronouns, website, phone, profile_image, banner_image, followers_count, following_count, last_login, created_at, updated_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.FullName,
		&i.PasswordHash,
		&i.GoogleID,
		&i.FbID,
		&i.IsEmailVerified,
		&i.IsActive,
		&i.IsBusinessAccount,
		&i.IsVerified,
		&i.Role,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
		&i.LoginAttempts,
		&i.LockoutUntil,
		&i.Gender,
		&i.Bio,
		&i.Pronouns,
		&i.Website,
		&i.Phone,
		&i.ProfileImage,
		&i.BannerImage,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserProfileByUsername = `-- name: GetUserProfileByUsername :one
SELECT 
  id,
  username,
  full_name,
  is_business_account,
  is_verified,
  gender,
  bio,
  pronouns,
  website,
  phone,
  profile_image,
  banner_image,
  followers_count,
  following_count,
  created_at
FROM users
WHERE username = $1 LIMIT 1
`

type GetUserProfileByUsernameRow struct {
	ID                string
	Username          string
	FullName          string
	IsBusinessAccount bool
	IsVerified        bool
	Gender            pgtype.Text
	Bio               pgtype.Text
	Pronouns          pgtype.Text
	Website           pgtype.Text
	Phone             pgtype.Text
	ProfileImage      pgtype.Text
	BannerImage       pgtype.Text
	FollowersCount    int32
	FollowingCount    int32
	CreatedAt         pgtype.Timestamptz
}

func (q *Queries) GetUserProfileByUsername(ctx context.Context, username string) (GetUserProfileByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserProfileByUsername, username)
	var i GetUserProfileByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.IsBusinessAccount,
		&i.IsVerified,
		&i.Gender,
		&i.Bio,
		&i.Pronouns,
		&i.Website,
		&i.Phone,
		&i.ProfileImage,
		&i.BannerImage,
		&i.FollowersCount,
		&i.FollowingCount,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserFbId = `-- name: UpdateUserFbId :exec
UPDATE users
SET fb_id = $2
WHERE id = $1
`

type UpdateUserFbIdParams struct {
	ID   string
	FbID pgtype.Text
}

func (q *Queries) UpdateUserFbId(ctx context.Context, arg UpdateUserFbIdParams) error {
	_, err := q.db.Exec(ctx, updateUserFbId, arg.ID, arg.FbID)
	return err
}

const updateUserGoogleId = `-- name: UpdateUserGoogleId :exec
UPDATE users
SET google_id = $2
WHERE id = $1
`

type UpdateUserGoogleIdParams struct {
	ID       string
	GoogleID pgtype.Text
}

func (q *Queries) UpdateUserGoogleId(ctx context.Context, arg UpdateUserGoogleIdParams) error {
	_, err := q.db.Exec(ctx, updateUserGoogleId, arg.ID, arg.GoogleID)
	return err
}

const updateUserIsEmailVerified = `-- name: UpdateUserIsEmailVerified :exec
UPDATE users
SET is_email_verified = $2
WHERE id = $1
`

type UpdateUserIsEmailVerifiedParams struct {
	ID              string
	IsEmailVerified bool
}

func (q *Queries) UpdateUserIsEmailVerified(ctx context.Context, arg UpdateUserIsEmailVerifiedParams) error {
	_, err := q.db.Exec(ctx, updateUserIsEmailVerified, arg.ID, arg.IsEmailVerified)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password_hash = $2
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID           string
	PasswordHash pgtype.Text
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}
