// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pois.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type BatchCreatePoisParams struct {
	ID                 string
	Name               string
	Phone              pgtype.Text
	Description        string
	AddressID          int32
	Website            pgtype.Text
	PriceLevel         int16
	AccessibilityLevel int16
	TotalVotes         int32
	TotalPoints        int32
	TotalFavorites     int32
	CategoryID         int16
	OpenTimes          []byte
}

const peekPois = `-- name: PeekPois :many
SELECT id, name, phone, description, address_id, website, price_level, accessibility_level, total_votes, total_points, total_favorites, category_id, open_times, created_at, updated_at FROM pois
LIMIT 25
`

func (q *Queries) PeekPois(ctx context.Context) ([]Poi, error) {
	rows, err := q.db.Query(ctx, peekPois)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Poi
	for rows.Next() {
		var i Poi
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.AddressID,
			&i.Website,
			&i.PriceLevel,
			&i.AccessibilityLevel,
			&i.TotalVotes,
			&i.TotalPoints,
			&i.TotalFavorites,
			&i.CategoryID,
			&i.OpenTimes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const randSelectPois = `-- name: RandSelectPois :many
SELECT id
FROM pois
ORDER BY RANDOM()
LIMIT $1
`

func (q *Queries) RandSelectPois(ctx context.Context, limit int32) ([]string, error) {
	rows, err := q.db.Query(ctx, randSelectPois, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
