// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: diaries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDiaryEntryPoi = `-- name: CreateDiaryEntryPoi :one
INSERT INTO diary_entries_pois (
  diary_entry_id,
  poi_id,
  description,
  list_index
) VALUES (
  $1,
  $2,
  $3,
  $4
) RETURNING diary_entry_id, poi_id, description, list_index
`

type CreateDiaryEntryPoiParams struct {
	DiaryEntryID string
	PoiID        string
	Description  pgtype.Text
	ListIndex    int32
}

func (q *Queries) CreateDiaryEntryPoi(ctx context.Context, arg CreateDiaryEntryPoiParams) (DiaryEntriesPoi, error) {
	row := q.db.QueryRow(ctx, createDiaryEntryPoi,
		arg.DiaryEntryID,
		arg.PoiID,
		arg.Description,
		arg.ListIndex,
	)
	var i DiaryEntriesPoi
	err := row.Scan(
		&i.DiaryEntryID,
		&i.PoiID,
		&i.Description,
		&i.ListIndex,
	)
	return i, err
}

const createDiaryEntryUser = `-- name: CreateDiaryEntryUser :one
INSERT INTO diary_entries_users (
  diary_entry_id,
  user_id,
  list_index
) VALUES (
  $1,
  $2,
  $3
) RETURNING diary_entry_id, user_id, list_index
`

type CreateDiaryEntryUserParams struct {
	DiaryEntryID string
	UserID       string
	ListIndex    int32
}

func (q *Queries) CreateDiaryEntryUser(ctx context.Context, arg CreateDiaryEntryUserParams) (DiaryEntriesUser, error) {
	row := q.db.QueryRow(ctx, createDiaryEntryUser, arg.DiaryEntryID, arg.UserID, arg.ListIndex)
	var i DiaryEntriesUser
	err := row.Scan(&i.DiaryEntryID, &i.UserID, &i.ListIndex)
	return i, err
}

const createDiaryMedia = `-- name: CreateDiaryMedia :one
INSERT INTO diary_media (
  diary_entry_id,
  url,
  alt,
  caption,
  media_order
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING id, diary_entry_id, url, alt, caption, media_order, created_at
`

type CreateDiaryMediaParams struct {
	DiaryEntryID string
	Url          string
	Alt          string
	Caption      pgtype.Text
	MediaOrder   int16
}

func (q *Queries) CreateDiaryMedia(ctx context.Context, arg CreateDiaryMediaParams) (DiaryMedium, error) {
	row := q.db.QueryRow(ctx, createDiaryMedia,
		arg.DiaryEntryID,
		arg.Url,
		arg.Alt,
		arg.Caption,
		arg.MediaOrder,
	)
	var i DiaryMedium
	err := row.Scan(
		&i.ID,
		&i.DiaryEntryID,
		&i.Url,
		&i.Alt,
		&i.Caption,
		&i.MediaOrder,
		&i.CreatedAt,
	)
	return i, err
}

const createNewDiaryEntry = `-- name: CreateNewDiaryEntry :one
INSERT INTO diary_entries (
  id,
  user_id,
  title,
  description,
  share_with_friends,
  date
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
) RETURNING id, user_id, title, description, share_with_friends, date, created_at, updated_at
`

type CreateNewDiaryEntryParams struct {
	ID               string
	UserID           string
	Title            string
	Description      string
	ShareWithFriends bool
	Date             pgtype.Timestamptz
}

func (q *Queries) CreateNewDiaryEntry(ctx context.Context, arg CreateNewDiaryEntryParams) (DiaryEntry, error) {
	row := q.db.QueryRow(ctx, createNewDiaryEntry,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.ShareWithFriends,
		arg.Date,
	)
	var i DiaryEntry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.ShareWithFriends,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
