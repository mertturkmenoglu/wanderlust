// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: follows.sql

package db

import (
	"context"
)

const follow = `-- name: Follow :exec
INSERT INTO follows (
  follower_id,
  following_id
) VALUES (
  $1,
  $2
)
`

type FollowParams struct {
	FollowerID  string
	FollowingID string
}

func (q *Queries) Follow(ctx context.Context, arg FollowParams) error {
	_, err := q.db.Exec(ctx, follow, arg.FollowerID, arg.FollowingID)
	return err
}

const isUserFollowing = `-- name: IsUserFollowing :one
SELECT EXISTS (
  SELECT 1
  FROM follows
  WHERE follower_id = $1 AND following_id = $2
)
`

type IsUserFollowingParams struct {
	FollowerID  string
	FollowingID string
}

func (q *Queries) IsUserFollowing(ctx context.Context, arg IsUserFollowingParams) (bool, error) {
	row := q.db.QueryRow(ctx, isUserFollowing, arg.FollowerID, arg.FollowingID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const unfollow = `-- name: Unfollow :exec
DELETE FROM follows
WHERE follower_id = $1 AND following_id = $2
`

type UnfollowParams struct {
	FollowerID  string
	FollowingID string
}

func (q *Queries) Unfollow(ctx context.Context, arg UnfollowParams) error {
	_, err := q.db.Exec(ctx, unfollow, arg.FollowerID, arg.FollowingID)
	return err
}
