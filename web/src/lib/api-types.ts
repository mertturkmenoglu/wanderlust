/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v2/aggregator/home": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Home Aggregation
         * @description Get home aggregation
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HomeAggregatorOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/amenities/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Amenities
         * @description Get all amenities
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ListAmenitiesOutputBody"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Amenity
         * @description Create a new amenity
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateAmenityInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateAmenityOutputBody"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/amenities/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Amenity
         * @description Delete an amenity by id
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of the amenity
                     * @example 15
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update Amenity
         * @description Update an amenity by id
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of the amenity
                     * @example 15
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateAmenityInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateAmenityOutputBody"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/auth/credentials/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login with Credentials
         * @description Login with email and password
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        Authorization?: string;
                        Domain?: string;
                        Expires?: string;
                        HttpOnly?: boolean;
                        MaxAge?: number;
                        Name?: string;
                        Partitioned?: boolean;
                        Path?: string;
                        Quoted?: boolean;
                        Raw?: string;
                        RawExpires?: string;
                        SameSite?: number;
                        Secure?: boolean;
                        "Set-Cookie"?: string;
                        Unparsed?: string;
                        Value?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LoginOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/auth/credentials/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register with Credentials
         * @description Register with email and password
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RegisterInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RegisterOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/auth/forgot-password/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset Password
         * @description Reset the password of the user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ResetPasswordInputBody"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/auth/forgot-password/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Forgot Password Email
         * @description Send forgot password email to the user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SendForgotPasswordEmailInputBody"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Logout
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        Domain?: string;
                        Expires?: string;
                        HttpOnly?: boolean;
                        MaxAge?: number;
                        Name?: string;
                        Partitioned?: boolean;
                        Path?: string;
                        Quoted?: boolean;
                        Raw?: string;
                        RawExpires?: string;
                        SameSite?: number;
                        Secure?: boolean;
                        "Set-Cookie"?: string;
                        Unparsed?: string;
                        Value?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User
         * @description Get the current user information
         */
        get: operations["auth-get-me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/auth/password/change": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Password
         * @description Change the password of the user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ChangePasswordInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        Domain?: string;
                        Expires?: string;
                        HttpOnly?: boolean;
                        MaxAge?: number;
                        Name?: string;
                        Partitioned?: boolean;
                        Path?: string;
                        Quoted?: boolean;
                        Raw?: string;
                        RawExpires?: string;
                        SameSite?: number;
                        Secure?: boolean;
                        "Set-Cookie"?: string;
                        Unparsed?: string;
                        Value?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Tokens
         * @description Refresh the tokens of the user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: {
                    /** @description Refresh token of the user */
                    refresh_token?: string;
                };
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        Domain?: string;
                        Expires?: string;
                        HttpOnly?: boolean;
                        MaxAge?: number;
                        Name?: string;
                        Partitioned?: boolean;
                        Path?: string;
                        Quoted?: boolean;
                        Raw?: string;
                        RawExpires?: string;
                        SameSite?: number;
                        Secure?: boolean;
                        "Set-Cookie"?: string;
                        Unparsed?: string;
                        Value?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/auth/{provider}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Start OAuth Flow
         * @description Start the OAuth flow for the given provider
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The OAuth provider
                     * @example google
                     */
                    provider: "google" | "facebook";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Temporary Redirect */
                307: {
                    headers: {
                        Location?: string;
                        "Set-Cookie"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/auth/{provider}/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * OAuth Callback
         * @description Callback for the OAuth flow
         */
        get: {
            parameters: {
                query?: {
                    /** @description Authorization code received from the OAuth provider */
                    code?: string;
                    /** @description State of the OAuth request */
                    state?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description The OAuth provider
                     * @example google
                     */
                    provider: "google" | "facebook";
                };
                cookie?: {
                    /** @description State of the OAuth request */
                    state?: string;
                };
            };
            requestBody?: never;
            responses: {
                /** @description Temporary Redirect */
                307: {
                    headers: {
                        Domain?: string;
                        Expires?: string;
                        HttpOnly?: boolean;
                        Location?: string;
                        MaxAge?: number;
                        Name?: string;
                        Partitioned?: boolean;
                        Path?: string;
                        Quoted?: boolean;
                        Raw?: string;
                        RawExpires?: string;
                        SameSite?: number;
                        Secure?: boolean;
                        "Set-Cookie"?: string;
                        Unparsed?: string;
                        Value?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/bookmarks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Bookmarks
         * @description Get a list of bookmarks for the current user
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number
                     * @example 2
                     */
                    page?: number;
                    /**
                     * @description Page size
                     * @example 20
                     */
                    pageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetUserBookmarksOutputBody"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Bookmark
         * @description Create a bookmark for a point of interest
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateBookmarkInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateBookmarkOutputBody"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/bookmarks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Bookmark
         * @description Delete a bookmark for a point of interest
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of point of interest
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Categories
         * @description Get all categories
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ListCategoriesOutputBody"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Category
         * @description Create a new category
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateCategoryInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateCategoryOutputBody"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Category
         * @description Delete a category by id
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of the category
                     * @example 4
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update Category
         * @description Update a category by id
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of the category
                     * @example 4
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateCategoryInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateCategoryOutputBody"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/cities/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List cities
         * @description List cities
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CitiesListOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create city
         * @description Create a new city
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateCityInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateCityOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/cities/featured": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Featured cities
         * @description Get featured cities
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CitiesFeaturedOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/cities/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get city
         * @description Get city by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description City ID
                     * @example 8102
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetCityByIdOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete city
         * @description Delete city by ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description City ID
                     * @example 8102
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update city
         * @description Update city by ID
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description City ID
                     * @example 8102
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateCityInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateCityOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/collections/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Collections
         * @description List all collections
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number
                     * @example 2
                     */
                    page?: number;
                    /**
                     * @description Page size
                     * @example 20
                     */
                    pageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetCollectionsOutputBody"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Collection
         * @description Create a collection
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateCollectionInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateCollectionOutputBody"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/collections/city/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All City Collections
         * @description Get all city collections
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetAllCityCollectionsOutputBody"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/collections/city/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Collections For a City
         * @description Get collections for a city
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of city
                     * @example 1
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetCollectionsForCityOutputBody"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/collections/poi/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All POI Collections
         * @description Get all POI collections
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetAllPoiCollectionsOutputBody"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/collections/poi/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Collections For a POI
         * @description Get collections for a POI
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of point of interest
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetCollectionsForPoiOutputBody"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/collections/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Collection by ID
         * @description Get a collection by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of collection
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetCollectionByIdOutputBody"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete Collection
         * @description Delete a collection by id
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of collection
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update Collection
         * @description Update a collection by id
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of collection
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateCollectionInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateCollectionOutputBody"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/collections/{id}/city/{cityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Collection City Relation
         * @description Create collection city relation
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of collection
                     * @example 7323488942953598976
                     */
                    id: string;
                    /**
                     * @description ID of city
                     * @example 1
                     */
                    cityId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        /**
         * Delete Collection city Relation
         * @description Delete collection city relation
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of collection
                     * @example 7323488942953598976
                     */
                    id: string;
                    /**
                     * @description ID of city
                     * @example 1
                     */
                    cityId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/collections/{id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Collection Item
         * @description Add an item to a collection
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of collection
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateCollectionItemInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateCollectionItemOutputBody"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Collection Items
         * @description Update the items of a collection
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of collection
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateCollectionItemsInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateCollectionItemsOutputBody"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/collections/{id}/items/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Collection Item
         * @description Delete a collection item by index
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of collection
                     * @example 7323488942953598976
                     */
                    id: string;
                    /**
                     * @description Index of collection item
                     * @example 1
                     */
                    index: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/collections/{id}/poi/{poiId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Collection POI Relation
         * @description Create collection POI relation
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of collection
                     * @example 7323488942953598976
                     */
                    id: string;
                    /**
                     * @description ID of point of interest
                     * @example 7323488942953598976
                     */
                    poiId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        /**
         * Delete Collection POI Relation
         * @description Delete collection POI relation
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of collection
                     * @example 7323488942953598976
                     */
                    id: string;
                    /**
                     * @description ID of point of interest
                     * @example 7323488942953598976
                     */
                    poiId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Unprocessable Entity */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/diary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Diaries
         * @description List diaries for the current user
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number
                     * @example 2
                     */
                    page?: number;
                    /**
                     * @description Page size
                     * @example 20
                     */
                    pageSize?: number;
                    /**
                     * @description Start date of the date range
                     * @example 2023-01-01
                     */
                    from?: string;
                    /**
                     * @description End date of the date range
                     * @example 2024-01-01
                     */
                    to?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetDiariesOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Diary
         * @description Create a diary
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateDiaryInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateDiaryOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/diary/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Diary
         * @description Get a diary by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of diary entry
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetDiaryByIdOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete Diary
         * @description Delete a diary
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of diary entry
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update Diary
         * @description Update a diary
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of the diary entry
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateDiaryInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateDiaryOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/diary/{id}/friends": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Diary Friends
         * @description Update a diary friends
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of the diary entry
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateDiaryFriendsInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateDiaryFriendsOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/diary/{id}/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Image to a Diary
         * @description Add image to a diary
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of diary entry
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UploadDiaryImageInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UploadDiaryImageOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Diary Image
         * @description Update a diary image
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of diary entry
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateDiaryImageInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateDiaryImageOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/diary/{id}/image/{imageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Diary Image
         * @description Delete a diary image
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of diary entry
                     * @example 7323488942953598976
                     */
                    id: string;
                    /**
                     * @description ID of media
                     * @example 123
                     */
                    imageId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/diary/{id}/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Diary Locations
         * @description Update a diary locations
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of the diary entry
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateDiaryLocationsInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateDiaryLocationsOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get List of Exports
         * @description Get list of exports
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetListOfExportsOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Start New Export Task
         * @description Start a new export task
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["StartNewExportTaskInputBody"];
                };
            };
            responses: {
                /** @description Accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StartNewExportTaskOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/export/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Export Metadata
         * @description Get export metadata
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Export ID
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetExportByIdOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/favorites/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Favorites
         * @description Get a list of favorites for the current user
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number
                     * @example 2
                     */
                    page?: number;
                    /**
                     * @description Page size
                     * @example 20
                     */
                    pageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetUserFavoritesOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Favorite
         * @description Create a favorite for a point of interest
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateFavoriteInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateFavoriteOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/favorites/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Favorite
         * @description Delete a favorite for a point of interest
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of point of interest
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/favorites/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Favorites by Username
         * @description Get a list of favorites for the given username
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number
                     * @example 2
                     */
                    page?: number;
                    /**
                     * @description Page size
                     * @example 20
                     */
                    pageSize?: number;
                };
                header?: never;
                path: {
                    /**
                     * @description Username of the user
                     * @example johndoe
                     */
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetUserFavoritesOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Health
         * @description A simple health check mechanism to verify that the API is operational
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/images/upload/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Presigned URL
         * @description Get a presigned URL for uploading an image
         */
        get: {
            parameters: {
                query: {
                    /** @example default */
                    bucket: "default" | "profile-images" | "banner-images" | "pois" | "reviews" | "diaries";
                    /** @example png */
                    fileExt: "jpg" | "png" | "webp" | "jpeg";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PresignedUrlOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/lists/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Lists of User
         * @description Get all lists of the current user
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number
                     * @example 2
                     */
                    page?: number;
                    /**
                     * @description Page size
                     * @example 20
                     */
                    pageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetAllListsOfUserOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create List
         * @description Create a new list
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateListInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateListOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/lists/status/{poiId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if List Includes POI
         * @description Check if list includes given poi id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    poiId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetListStatusesOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/lists/user/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Public Lists of User
         * @description Get public lists of user with username
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number
                     * @example 2
                     */
                    page?: number;
                    /**
                     * @description Page size
                     * @example 20
                     */
                    pageSize?: number;
                };
                header?: never;
                path: {
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetPublicListsOfUserOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/lists/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get List by ID
         * @description Get a list by id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetListByIdOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete List
         * @description Delete a list by id
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update List
         * @description Update a list by id
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateListInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateListOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/lists/{id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create List Item
         * @description Add an item to a list by its id
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateListItemInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateListItemOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update List Items
         * @description Update the items of a list
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateListItemsInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateListItemsOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/pois/peek": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Peek Point of Interests
         * @description Get 25 pois
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PeekPoisOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/pois/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Point of Interest
         * @description Get a point of interest by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of point of interest
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetPoiByIdOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/pois/{id}/address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Point of Interest Address
         * @description Update a point of interest address
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of POI
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdatePoiAddressInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdatePoiAddressOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/pois/{id}/amenities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Point of Interest Amenities
         * @description Update a point of interest amenities
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of POI
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdatePoiAmenitiesInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdatePoiAmenitiesOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/pois/{id}/hours": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Point of Interest Hours
         * @description Update a point of interest hours
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of POI
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdatePoiHoursInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdatePoiHoursOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/pois/{id}/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Point of Interest Image
         * @description Upload a point of interest image
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of POI
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UploadPoiImageInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UploadPoiImageOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/pois/{id}/images/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Reorder Point of Interest Images
         * @description Reorder a point of interest images
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of POI
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ReorderPoiImagesInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ReorderPoiImagesOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/pois/{id}/images/{imageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Point of Interest Image
         * @description Delete a point of interest image
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of POI
                     * @example 7323488942953598976
                     */
                    id: string;
                    /**
                     * @description ID of image
                     * @example 1
                     */
                    imageId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update Point of Interest Image
         * @description Update a point of interest image
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of POI
                     * @example 7323488942953598976
                     */
                    id: string;
                    /**
                     * @description ID of image
                     * @example 7323488
                     */
                    imageId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdatePoiImageInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdatePoiImageOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/pois/{id}/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Point of Interest General Information
         * @description Update a point of interest general information
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of POI
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdatePoiInfoInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdatePoiInfoOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/reports/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Reports
         * @description Get reports
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number
                     * @example 2
                     */
                    page?: number;
                    /**
                     * @description Page size
                     * @example 20
                     */
                    pageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetReportsOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Report
         * @description Create a report
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateReportInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateReportOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reports/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Reports
         * @description Search reports
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number
                     * @example 2
                     */
                    page?: number;
                    /**
                     * @description Page size
                     * @example 20
                     */
                    pageSize?: number;
                    /**
                     * @description ID of the reporter
                     * @example 564457817990234127
                     */
                    reporterId?: string;
                    /**
                     * @description Type of the resource
                     * @example poi
                     */
                    resourceType?: string;
                    /**
                     * @description Reason for the report
                     * @example 1
                     */
                    reason?: number;
                    /**
                     * @description Whether the report is resolved
                     * @example false
                     */
                    resolved?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchReportsOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reports/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Report
         * @description Get report by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of the report
                     * @example 564457817990234127
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetReportByIdOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete Report
         * @description Delete a report
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of the report
                     * @example 564457817990234127
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update Report
         * @description Update a report
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of the report
                     * @example 564457817990234127
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateReportInputBody"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateReportOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/reviews/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Review
         * @description Create a review
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateReviewInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateReviewOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reviews/poi/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Reviews by POI ID
         * @description Get reviews by POI ID
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Sort by
                     * @example created_at
                     */
                    sortBy?: "created_at" | "rating";
                    /**
                     * @description Sort order
                     * @example desc
                     */
                    sortOrd?: "asc" | "desc";
                    /**
                     * @description Minimum rating
                     * @example 1
                     */
                    minRating?: number;
                    /**
                     * @description Maximum rating
                     * @example 5
                     */
                    maxRating?: number;
                    /**
                     * @description Page number
                     * @example 2
                     */
                    page?: number;
                    /**
                     * @description Page size
                     * @example 20
                     */
                    pageSize?: number;
                };
                header?: never;
                path: {
                    /**
                     * @description ID of point of interest
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetReviewsByPoiIdOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reviews/poi/{id}/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get POI Reviews Images
         * @description Get images of the POI reviews
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of point of interest
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetReviewImagesByPoiIdOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reviews/poi/{id}/ratings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get POI ratings
         * @description Get ratings for a POI
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of point of interest
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetRatingsByPoiIdOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reviews/user/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Reviews by Username
         * @description Get reviews by username
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number
                     * @example 2
                     */
                    page?: number;
                    /**
                     * @description Page size
                     * @example 20
                     */
                    pageSize?: number;
                };
                header?: never;
                path: {
                    /**
                     * @description Username of the user
                     * @example johndoe
                     */
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetReviewsByUsernameOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reviews/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Review by ID
         * @description Get a review by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of review
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetReviewByIdOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete Review
         * @description Delete a review
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of review
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateReviewOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reviews/{id}/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Media for a Review
         * @description Upload media for a review
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of draft
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UploadReviewMediaInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UploadReviewMediaOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/trips/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Trips
         * @description Get all trips for the current user
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number
                     * @example 2
                     */
                    page?: number;
                    /**
                     * @description Page size
                     * @example 20
                     */
                    pageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetAllTripsOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Trip
         * @description Create a new trip
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateTripInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateTripOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/trips/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Invites
         * @description Get all invites for the current user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetMyTripInvitesOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/trips/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Trip
         * @description Get a trip by its ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trip ID
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetTripByIdOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete Trip
         * @description Delete a trip
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trip ID
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update Trip
         * @description Update a trip
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trip ID
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateTripInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateTripOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/trips/{id}/amenities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Manage Trip Amenities
         * @description Manage trip amenities by trip id
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trip ID
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateTripAmenitiesInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateTripAmenitiesOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/trips/{id}/comments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Trip Comments
         * @description Get comments for a trip
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number
                     * @example 2
                     */
                    page?: number;
                    /**
                     * @description Page size
                     * @example 20
                     */
                    pageSize?: number;
                };
                header?: never;
                path: {
                    /**
                     * @description Trip ID
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetTripCommentsOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Comment
         * @description Create a comment for a trip
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trip ID
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateTripCommentInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateTripCommentOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/trips/{id}/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Invite Participants
         * @description Invite participants to a trip
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trip ID
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateTripInviteInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateTripInviteOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/trips/{id}/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Invites for a Trip
         * @description Get all invites for a trip
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trip ID
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetTripInvitesByTripIdOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/trips/{id}/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Location to Trip
         * @description Add a location to a trip
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trip ID
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateTripLocationInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateTripLocationOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/trips/{tripId}/comments/{commentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Trip Comment
         * @description Delete a trip comment
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trip ID
                     * @example 7323488942953598976
                     */
                    tripId: string;
                    /**
                     * @description Comment ID
                     * @example 7323488942953598976
                     */
                    commentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update Trip Comment
         * @description Update a comment for a trip
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trip ID
                     * @example 7323488942953598976
                     */
                    tripId: string;
                    /**
                     * @description Comment ID
                     * @example 7323488942953598976
                     */
                    commentId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateTripCommentInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateTripCommentOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/trips/{tripId}/invites/{inviteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Trip Invite Details
         * @description Get a trip invite details by its ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trip ID
                     * @example 7323488942953598976
                     */
                    tripId: string;
                    /**
                     * @description Invite ID
                     * @example 7323488942953598976
                     */
                    inviteId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetTripInviteDetailsOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Remove Invite
         * @description Remove an invite by its ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trip ID
                     * @example 7323488942953598976
                     */
                    tripId: string;
                    /**
                     * @description Invite ID
                     * @example 7323488942953598976
                     */
                    inviteId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/trips/{tripId}/invites/{inviteId}/{action}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accept/Decline Trip Invite
         * @description Accept/Decline a trip invite by its ID
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trip ID
                     * @example 7323488942953598976
                     */
                    tripId: string;
                    /**
                     * @description Invite ID
                     * @example 7323488942953598976
                     */
                    inviteId: string;
                    /**
                     * @description Action to perform on the invite
                     * @example accept
                     */
                    action: "accept" | "decline";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TripInviteActionOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/trips/{tripId}/locations/{locationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove Trip Location
         * @description Remove a trip location
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trip ID
                     * @example 7323488942953598976
                     */
                    tripId: string;
                    /**
                     * @description Location ID
                     * @example 7323488942953598976
                     */
                    locationId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update Trip Location
         * @description Update a trip location
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trip ID
                     * @example 7323488942953598976
                     */
                    tripId: string;
                    /**
                     * @description Location ID
                     * @example 7323488942953598976
                     */
                    locationId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateTripLocationInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateTripLocationOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/trips/{tripId}/participants/{participantId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove Participant
         * @description Remove a participant from a trip
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trip ID
                     * @example 7323488942953598976
                     */
                    tripId: string;
                    /**
                     * @description Participant User ID
                     * @example 7323488942953598976
                     */
                    participantId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/users/follow/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Follow User
         * @description Follow or unfollow user by username
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Username of the user
                     * @example johndoe
                     */
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FollowUserOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/users/image/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update User Image
         * @description Update the profile image or the banner image of the user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Type of image
                     * @example profile
                     */
                    type: "profile" | "banner";
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateUserProfileImageInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateUserProfileImageOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/users/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update User Profile
         * @description Update user profile of the current user
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateUserProfileInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateUserProfileOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/users/search/following": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search User Following
         * @description Search user following by username
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Username of the user
                     * @example johndoe
                     */
                    username?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchUserFollowingOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/users/top": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update User Top Point of Interests
         * @description Update user top point of interests
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateUserTopPoisInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateUserTopPoisOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/users/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Profile
         * @description Get a user profile by username
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Username of the user
                     * @example johndoe
                     */
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetUserProfileOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/users/{username}/activities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Activities
         * @description Get user activities by username
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Username of the user
                     * @example johndoe
                     */
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetUserActivitiesOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/users/{username}/followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Followers
         * @description Get user followers by username
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Username of the user
                     * @example johndoe
                     */
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetUserFollowersOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/users/{username}/following": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Following
         * @description Get user following by username
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Username of the user
                     * @example johndoe
                     */
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetUserFollowingOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/users/{username}/make-verified": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Make User Verified
         * @description Make user verified by username
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Username of the user
                     * @example johndoe
                     */
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MakeUserVerifiedOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/users/{username}/top": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Top Point of Interests
         * @description Get user top point of interests by username
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Username of the user
                     * @example johndoe
                     */
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetUserTopPoisOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Address: {
            city: components["schemas"]["City"];
            /**
             * Format: int32
             * @description ID of city of address of point of interest
             */
            cityId: number;
            /**
             * Format: int32
             * @description ID of address of point of interest
             */
            id: number;
            /**
             * Format: double
             * @description Latitude of address of point of interest
             */
            lat: number;
            /** @description Line 1 of address of point of interest */
            line1: string;
            /** @description Line 2 of address of point of interest */
            line2: string | null;
            /**
             * Format: double
             * @description Longitude of address of point of interest
             */
            lng: number;
            /** @description Postal code of address of point of interest */
            postalCode: string | null;
        };
        Amenity: {
            /**
             * Format: int32
             * @description ID of the amenity
             */
            id: number;
            /** @description Name of the amenity */
            name: string;
        };
        Bookmark: {
            /**
             * Format: date-time
             * @description Created at time of bookmark
             */
            createdAt: string;
            /**
             * Format: int32
             * @description ID of bookmark
             */
            id: number;
            poi: components["schemas"]["Poi"];
            /** @description ID of point of interest */
            poiId: string;
            /** @description ID of user */
            userId: string;
        };
        Category: {
            /**
             * Format: int32
             * @description ID of the category
             */
            id: number;
            /** @description Image URL */
            image: string;
            /** @description Name of the category */
            name: string;
        };
        ChangePasswordInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Confirm password of the user */
            confirmPassword: string;
            /** @description Current password of the user */
            currentPassword: string;
            /** @description New password of the user */
            newPassword: string;
        };
        CitiesFeaturedOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            cities: components["schemas"]["City"][];
        };
        CitiesListOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            cities: components["schemas"]["City"][];
        };
        City: {
            coordinates: components["schemas"]["CityCoordinates"];
            country: components["schemas"]["CityCountry"];
            /** @description City description */
            description: string;
            /**
             * Format: int32
             * @description City ID
             */
            id: number;
            image: string;
            /** @description City name */
            name: string;
            state: components["schemas"]["CityState"];
        };
        CityCoordinates: {
            /**
             * Format: double
             * @description Latitude
             */
            latitude: number;
            /**
             * Format: double
             * @description Longitude
             */
            longitude: number;
        };
        CityCountry: {
            /** @description Country code */
            code: string;
            /** @description Country name */
            name: string;
        };
        CityState: {
            /** @description State code */
            code: string;
            /** @description State name */
            name: string;
        };
        Collection: {
            /**
             * Format: date-time
             * @description Created at time of collection
             */
            createdAt: string;
            /** @description Description of collection */
            description: string;
            /** @description ID of collection */
            id: string;
            items: components["schemas"]["CollectionItem"][];
            /** @description Name of collection */
            name: string;
        };
        CollectionItem: {
            /** @description ID of collection */
            collectionId: string;
            /**
             * Format: date-time
             * @description Created at time of collection item
             */
            createdAt: string;
            /**
             * Format: int32
             * @description Index of collection item in the list
             */
            index: number;
            poi: components["schemas"]["Poi"];
            /** @description ID of point of interest */
            poiId: string;
        };
        CreateAmenityInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Name of the amenity */
            name: string;
        };
        CreateAmenityOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: int32
             * @description ID of the amenity
             */
            id: number;
            /** @description Name of the amenity */
            name: string;
        };
        CreateBookmarkInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description ID of point of interest */
            poiId: string;
        };
        CreateBookmarkOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: date-time
             * @description Created at time of bookmark
             */
            createdAt: string;
            /**
             * Format: int32
             * @description ID of bookmark
             */
            id: number;
            /** @description ID of point of interest */
            poiId: string;
            /** @description ID of user */
            userId: string;
        };
        CreateCategoryInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: int32
             * @description ID of the category
             */
            id: number;
            /**
             * Format: uri
             * @description Image URL
             */
            image: string;
            /** @description Name of the category */
            name: string;
        };
        CreateCategoryOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: int32
             * @description ID of the category
             */
            id: number;
            /** @description Image URL */
            image: string;
            /** @description Name of the category */
            name: string;
        };
        CreateCityInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Country code */
            countryCode: string;
            /** @description Country name */
            countryName: string;
            /** @description City description */
            description: string;
            /**
             * Format: int32
             * @description City ID
             */
            id: number;
            /**
             * Format: uri
             * @description Image URL
             */
            image: string;
            /**
             * Format: double
             * @description Latitude
             */
            latitude: number;
            /**
             * Format: double
             * @description Longitude
             */
            longitude: number;
            /** @description City name */
            name: string;
            /** @description State code */
            stateCode: string;
            /** @description State name */
            stateName: string;
        };
        CreateCityOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            coordinates: components["schemas"]["CityCoordinates"];
            country: components["schemas"]["CityCountry"];
            /** @description City description */
            description: string;
            /**
             * Format: int32
             * @description City ID
             */
            id: number;
            image: string;
            /** @description City name */
            name: string;
            state: components["schemas"]["CityState"];
        };
        CreateCollectionInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Description of the collection */
            description: string;
            /** @description Name of the collection */
            name: string;
        };
        CreateCollectionItemInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description ID of point of interest */
            poiId: string;
        };
        CreateCollectionItemOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            collection: components["schemas"]["Collection"];
        };
        CreateCollectionOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            collection: components["schemas"]["Collection"];
        };
        CreateDiaryInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: date-time
             * @description The date of the diary entry
             */
            date: string;
            /** @description The title of the diary entry */
            title: string;
        };
        CreateDiaryOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            diary: components["schemas"]["Diary"];
        };
        CreateFavoriteInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description ID of point of interest */
            poiId: string;
        };
        CreateFavoriteOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: date-time
             * @description Created at time of favorite
             */
            createdAt: string;
            /**
             * Format: int32
             * @description ID of favorite
             */
            id: number;
            /** @description ID of point of interest */
            poiId: string;
            /** @description ID of user */
            userId: string;
        };
        CreateListInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            isPublic: boolean;
            name: string;
        };
        CreateListItemInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            poiId: string;
        };
        CreateListItemOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: date-time
             * @description Created at time of list item
             */
            createdAt: string;
            /**
             * Format: int32
             * @description Index of the POI in the list
             */
            index: number;
            /** @description ID of the list */
            listId: string;
            /** @description ID of the POI */
            poiId: string;
        };
        CreateListOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            list: components["schemas"]["List"];
        };
        CreateReportInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Description of the report */
            description: string;
            /**
             * Format: int32
             * @description Reason for the report
             */
            reason: number;
            /** @description ID of the resource */
            resourceId: string;
            /** @description Type of the resource */
            resourceType: string;
        };
        CreateReportOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            report: components["schemas"]["Report"];
        };
        CreateReviewInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Content of the review */
            content: string;
            /** @description ID of point of interest */
            poiId: string;
            /**
             * Format: int32
             * @description Rating of the review
             */
            rating: number;
        };
        CreateReviewOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            review: components["schemas"]["Review"];
        };
        CreateTripCommentInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Content of comment */
            content: string;
        };
        CreateTripCommentOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            comment: components["schemas"]["TripComment"];
        };
        CreateTripInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Description of the trip */
            description: string;
            /**
             * Format: date-time
             * @description End datetime of the trip
             */
            endAt: string;
            /**
             * Format: date-time
             * @description Start datetime of the trip
             */
            startAt: string;
            /** @description Title of the trip */
            title: string;
            /**
             * @description Visibility level of the trip
             * @enum {string}
             */
            visibility: "public" | "private" | "friends";
        };
        CreateTripInviteInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * @description Role of invite
             * @enum {string}
             */
            role: "participant" | "editor";
            /** @description User ID */
            toId: string;
        };
        CreateTripInviteOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            invite: components["schemas"]["TripInvite"];
        };
        CreateTripLocationInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Description of the location */
            description?: string | null;
            /** @description Point of Interest ID */
            poiId: string;
            /**
             * Format: date-time
             * @description Scheduled time of the location visit
             */
            scheduledTime: string;
        };
        CreateTripLocationOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            location: components["schemas"]["TripLocation"];
        };
        CreateTripOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            trip: components["schemas"]["Trip"];
        };
        Diary: {
            /**
             * Format: date-time
             * @description The created at time of the diary entry
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The date of the diary entry
             */
            date: string;
            /** @description The description of the diary entry */
            description: string;
            friends: components["schemas"]["DiaryUser"][];
            /** @description The ID of the diary entry */
            id: string;
            images: components["schemas"]["DiaryImage"][];
            locations: components["schemas"]["DiaryLocation"][];
            /** @description Whether the diary entry is shared with friends or not */
            shareWithFriends: boolean;
            /** @description The title of the diary entry */
            title: string;
            /**
             * Format: date-time
             * @description The updated at time of the diary entry
             */
            updatedAt: string;
            user: components["schemas"]["DiaryUser"];
            /** @description The ID of the user */
            userId: string;
        };
        DiaryImage: {
            /**
             * Format: date-time
             * @description The created at time of the media
             */
            createdAt: string;
            /** @description The ID of the diary entry */
            diaryId: string;
            /**
             * Format: int64
             * @description The ID of the media
             */
            id: number;
            /**
             * Format: int32
             * @description The media order of the media
             */
            index: number;
            /** @description The URL of the media */
            url: string;
        };
        DiaryLocation: {
            /** @description The description of the location */
            description: string | null;
            /**
             * Format: int32
             * @description The list index of the location
             */
            index: number;
            poi: components["schemas"]["Poi"];
            /** @description Point of Interest ID */
            poiId: string;
        };
        DiaryUser: {
            /** @description User full name */
            fullName: string;
            /** @description User ID */
            id: string;
            /** @description Profile image URL of the user */
            profileImage: string | null;
            /** @description Username */
            username: string;
        };
        ErrorDetail: {
            /** @description Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
            location?: string;
            /** @description Error message text */
            message?: string;
            /** @description The value at the given location */
            value?: unknown;
        };
        ErrorModel: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail?: string;
            /** @description Optional list of individual error details */
            errors?: components["schemas"]["ErrorDetail"][];
            /**
             * Format: uri
             * @description A URI reference that identifies the specific occurrence of the problem.
             */
            instance?: string;
            /**
             * Format: int64
             * @description HTTP status code
             */
            status?: number;
            /** @description A short, human-readable summary of the problem type. This value should not change between occurrences of the error. */
            title?: string;
            /**
             * Format: uri
             * @description A URI reference to human-readable documentation for the error.
             * @default about:blank
             */
            type: string;
        };
        ExportTaskMetadata: {
            /**
             * Format: date-time
             * @description Created at time of export
             */
            createdAt: string;
            /** @description Error of export */
            error: string | null;
            /** @description File of export */
            file: string | null;
            /** @description ID of export */
            id: string;
            /** @description IDs of exported data */
            ids: string[];
            /** @description Which data to include */
            include: string[];
            /**
             * Format: int32
             * @description Progress of export
             */
            progress: number;
            /** @description Status of export */
            status: string;
        };
        Favorite: {
            /**
             * Format: date-time
             * @description Created at time of favorite
             */
            createdAt: string;
            /**
             * Format: int32
             * @description ID of favorite
             */
            id: number;
            poi: components["schemas"]["Poi"];
            /** @description ID of point of interest */
            poiId: string;
            /** @description ID of user */
            userId: string;
        };
        FollowUserOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            isFollowing: boolean;
        };
        GetAllCityCollectionsOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            collections: components["schemas"]["Collection"][];
        };
        GetAllListsOfUserOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            lists: components["schemas"]["List"][];
            pagination: components["schemas"]["PaginationInfo"];
        };
        GetAllPoiCollectionsOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            collections: components["schemas"]["Collection"][];
        };
        GetAllTripsOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            pagination: components["schemas"]["PaginationInfo"];
            trips: components["schemas"]["Trip"][];
        };
        GetCityByIdOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            coordinates: components["schemas"]["CityCoordinates"];
            country: components["schemas"]["CityCountry"];
            /** @description City description */
            description: string;
            /**
             * Format: int32
             * @description City ID
             */
            id: number;
            image: string;
            /** @description City name */
            name: string;
            state: components["schemas"]["CityState"];
        };
        GetCollectionByIdOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            collection: components["schemas"]["Collection"];
        };
        GetCollectionsForCityOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            collections: components["schemas"]["Collection"][];
        };
        GetCollectionsForPoiOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            collections: components["schemas"]["Collection"][];
        };
        GetCollectionsOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            collections: components["schemas"]["Collection"][];
            pagination: components["schemas"]["PaginationInfo"];
        };
        GetDiariesOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            diaries: components["schemas"]["Diary"][];
            pagination: components["schemas"]["PaginationInfo"];
        };
        GetDiaryByIdOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            diary: components["schemas"]["Diary"];
        };
        GetExportByIdOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            export: components["schemas"]["ExportTaskMetadata"];
        };
        GetListByIdOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            list: components["schemas"]["List"];
        };
        GetListOfExportsOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            exports: components["schemas"]["ExportTaskMetadata"][];
        };
        GetListStatusesOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            statuses: components["schemas"]["ListStatus"][];
        };
        GetMeOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Banner image of the user */
            bannerImage: string | null;
            /** @description Bio of the user */
            bio: string | null;
            /**
             * Format: date-time
             * @description Creation date of the user
             */
            createdAt: string;
            /** @description Email of the user */
            email: string;
            /** @description Facebook ID of the user */
            facebookId: string | null;
            /**
             * Format: int32
             * @description Number of followers
             */
            followersCount: number;
            /**
             * Format: int32
             * @description Number of following
             */
            followingCount: number;
            /** @description Full name of the user */
            fullName: string;
            /** @description Google ID of the user */
            googleId: string | null;
            /** @description ID of the user */
            id: string;
            /** @description Is the user verified */
            isVerified: boolean;
            /** @description Profile image of the user */
            profileImage: string | null;
            /** @description Pronouns of the user */
            pronouns: string | null;
            /** @description The user's role */
            role: string;
            /**
             * Format: date-time
             * @description Last update date of the user
             */
            updatedAt: string;
            /** @description Username of the user */
            username: string;
            /** @description Website of the user */
            website: string | null;
        };
        GetMyTripInvitesOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            invites: components["schemas"]["TripInvite"][];
        };
        GetPoiByIdMeta: {
            isBookmarked: boolean;
            isFavorite: boolean;
        };
        GetPoiByIdOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            meta: components["schemas"]["GetPoiByIdMeta"];
            poi: components["schemas"]["Poi"];
        };
        GetPublicListsOfUserOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            lists: components["schemas"]["List"][];
            pagination: components["schemas"]["PaginationInfo"];
        };
        GetRatingsByPoiIdOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            ratings: {
                [key: string]: number;
            };
            /** Format: int64 */
            totalVotes: number;
        };
        GetReportByIdOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            report: components["schemas"]["Report"];
        };
        GetReportsOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            pagination: components["schemas"]["PaginationInfo"];
            reports: components["schemas"]["Report"][];
        };
        GetReviewByIdOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            review: components["schemas"]["Review"];
        };
        GetReviewImagesByPoiIdOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            images: components["schemas"]["ReviewImage"][];
        };
        GetReviewsByPoiIdOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            pagination: components["schemas"]["PaginationInfo"];
            reviews: components["schemas"]["Review"][];
        };
        GetReviewsByUsernameOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            pagination: components["schemas"]["PaginationInfo"];
            reviews: components["schemas"]["Review"][];
        };
        GetTripByIdOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            trip: components["schemas"]["Trip"];
        };
        GetTripCommentsOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            comments: components["schemas"]["TripComment"][];
            pagination: components["schemas"]["PaginationInfo"];
        };
        GetTripInviteDetailsOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            inviteDetail: components["schemas"]["TripInviteDetail"];
        };
        GetTripInvitesByTripIdOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            invites: components["schemas"]["TripInvite"][];
        };
        GetUserActivitiesOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            activities: {
                [key: string]: unknown;
            }[];
        };
        GetUserBookmarksOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            bookmarks: components["schemas"]["Bookmark"][];
            pagination: components["schemas"]["PaginationInfo"];
        };
        GetUserFavoritesOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            favorites: components["schemas"]["Favorite"][];
            pagination: components["schemas"]["PaginationInfo"];
        };
        GetUserFollowersOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            followers: components["schemas"]["Profile"][];
        };
        GetUserFollowingOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            following: components["schemas"]["Profile"][];
        };
        GetUserProfileOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            meta: components["schemas"]["GetUserProfileOutputMeta"];
            profile: components["schemas"]["Profile"];
        };
        GetUserProfileOutputMeta: {
            isFollowing: boolean;
        };
        GetUserTopPoisOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            pois: components["schemas"]["Poi"][];
        };
        HealthOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Health message of the API */
            message: string;
        };
        HomeAggregatorOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            favorites: components["schemas"]["Poi"][];
            featured: components["schemas"]["Poi"][];
            new: components["schemas"]["Poi"][];
            popular: components["schemas"]["Poi"][];
        };
        Image: {
            /** @description Alt text of image */
            alt: string;
            /**
             * Format: int64
             * @description Image ID
             */
            id: number;
            /**
             * Format: int32
             * @description Order of image
             */
            index: number;
            /** @description Image URL */
            url: string;
        };
        List: {
            /**
             * Format: date-time
             * @description Date and time when the list was created
             */
            createdAt: string;
            /** @description ID of the list */
            id: string;
            /** @description Whether the list is public or not */
            isPublic: boolean;
            items: components["schemas"]["ListItem"][];
            /** @description Name of the list */
            name: string;
            /**
             * Format: date-time
             * @description Date and time when the list was last updated
             */
            updatedAt: string;
            user: components["schemas"]["ListUser"];
            /** @description ID of the user that owns the list */
            userId: string;
        };
        ListAmenitiesOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            amenities: components["schemas"]["Amenity"][];
        };
        ListCategoriesOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            categories: components["schemas"]["Category"][];
        };
        ListItem: {
            /** Format: date-time */
            createdAt: string;
            /** Format: int32 */
            index: number;
            listId: string;
            poi: components["schemas"]["Poi"];
            poiId: string;
        };
        ListStatus: {
            /** @description ID of the list */
            id: string;
            /** @description Whether the POI is included in the list */
            includes: boolean;
            /** @description Name of the list */
            name: string;
        };
        ListUser: {
            /** @description Full name of the user */
            fullName: string;
            /** @description ID of the user */
            id: string;
            /** @description Profile image of the user */
            profileImage: string | null;
            /** @description Username of the user */
            username: string;
        };
        LoginInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: email
             * @description Email of the user
             */
            email: string;
            /** @description Password of the user */
            password: string;
        };
        LoginOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description JWT token for the user */
            token: string;
        };
        MakeUserVerifiedOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            isVerified: boolean;
        };
        NewOrderItem: {
            /** Format: int32 */
            listIndex: number;
            poiId: string;
        };
        OpenClose: {
            /** @description Closing time of POI in 24H format */
            closesAt: string;
            /** @description Opening time of POI in 24H format */
            opensAt: string;
        };
        PaginationInfo: {
            /** @description Has next page */
            hasNext: boolean;
            /** @description Has previous page */
            hasPrevious: boolean;
            /**
             * Format: int32
             * @description Page number
             */
            page: number;
            /**
             * Format: int32
             * @description Page size
             */
            pageSize: number;
            /**
             * Format: int64
             * @description Total pages
             */
            totalPages: number;
            /**
             * Format: int64
             * @description Total records
             */
            totalRecords: number;
        };
        PeekPoisOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            pois: components["schemas"]["Poi"][];
        };
        Poi: {
            /**
             * Format: int32
             * @description Accessibility level of point of interest
             */
            accessibilityLevel: number;
            address: components["schemas"]["Address"];
            /**
             * Format: int32
             * @description ID of address of point of interest
             */
            addressId: number;
            amenities: components["schemas"]["Amenity"][];
            category: components["schemas"]["Category"];
            /**
             * Format: int32
             * @description ID of category of point of interest
             */
            categoryId: number;
            /**
             * Format: date-time
             * @description Created at time of point of interest
             */
            createdAt: string;
            /** @description Description of point of interest */
            description: string;
            hours: {
                [key: string]: components["schemas"]["OpenClose"];
            };
            /** @description ID of point of interest */
            id: string;
            images: components["schemas"]["Image"][];
            /** @description Name of point of interest */
            name: string;
            /** @description Phone number of point of interest */
            phone: string | null;
            /**
             * Format: int32
             * @description Price level of point of interest
             */
            priceLevel: number;
            /**
             * Format: int32
             * @description Total favorites of point of interest
             */
            totalFavorites: number;
            /**
             * Format: int32
             * @description Total points of point of interest
             */
            totalPoints: number;
            /**
             * Format: int32
             * @description Total votes of point of interest
             */
            totalVotes: number;
            /**
             * Format: date-time
             * @description Updated at time of point of interest
             */
            updatedAt: string;
            /** @description Website of point of interest */
            website: string | null;
        };
        PresignedUrlOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Bucket of image */
            bucket: string;
            /** @description File extension of image */
            fileExtension: string;
            /** @description File name of image */
            fileName: string;
            /** @description ID of image */
            id: string;
            /** @description URL of image upload endpoint */
            url: string;
        };
        Profile: {
            /** @description Banner image of user */
            bannerImage: string | null;
            /** @description Bio of user */
            bio: string | null;
            /**
             * Format: date-time
             * @description Created at time of user
             */
            createdAt: string;
            /**
             * Format: int32
             * @description Number of followers
             */
            followersCount: number;
            /**
             * Format: int32
             * @description Number of following
             */
            followingCount: number;
            /** @description Full name of user */
            fullName: string;
            /** @description ID of user */
            id: string;
            /** @description Is user a business account */
            isBusinessAccount: boolean;
            /** @description Is user verified */
            isVerified: boolean;
            /** @description Phone number of user */
            phone: string | null;
            /** @description Profile image of user */
            profileImage: string | null;
            /** @description Pronouns of user */
            pronouns: string | null;
            /** @description Username of user */
            username: string;
            /** @description Website of user */
            website: string | null;
        };
        RegisterInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: email
             * @description Email of the user
             */
            email: string;
            /** @description Full name of the user */
            fullName: string;
            /** @description Password of the user */
            password: string;
            /** @description Username of the user */
            username: string;
        };
        RegisterOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: date-time
             * @description Creation date of the user
             */
            createdAt: string;
            /** @description Email of the user */
            email: string;
            /** @description Full name of the user */
            fullName: string;
            /** @description ID of the user */
            id: string;
            /**
             * Format: date-time
             * @description Last update date of the user
             */
            updatedAt: string;
            /** @description Username of the user */
            username: string;
        };
        ReorderPoiImagesInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description IDs of images */
            images: number[];
        };
        ReorderPoiImagesOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            poi: components["schemas"]["Poi"];
        };
        Report: {
            /**
             * Format: date-time
             * @description Date the report was created
             */
            createdAt: string;
            /** @description Description of the report */
            description: string | null;
            /** @description ID of the report */
            id: string;
            /**
             * Format: int32
             * @description Reason for the report
             */
            reason: number;
            /** @description ID of the reporter */
            reporterId: string | null;
            /** @description Whether the report is resolved */
            resolved: boolean;
            /**
             * Format: date-time
             * @description Date the report was resolved
             */
            resolvedAt: string | null;
            /** @description ID of the resource */
            resourceId: string;
            /** @description Type of the resource */
            resourceType: string;
            /**
             * Format: date-time
             * @description Date the report was last updated
             */
            updatedAt: string;
        };
        ResetPasswordInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Verification code */
            code: string;
            /**
             * Format: email
             * @description Email of the user
             */
            email: string;
            /** @description New password of the user */
            newPassword: string;
        };
        Review: {
            /** @description Content of the review */
            content: string;
            /**
             * Format: date-time
             * @description Created at time of review
             */
            createdAt: string;
            /** @description ID of review */
            id: string;
            images: components["schemas"]["ReviewImage"][];
            poi: components["schemas"]["Poi"];
            /** @description ID of point of interest */
            poiId: string;
            /**
             * Format: int32
             * @description Rating of the review
             */
            rating: number;
            /**
             * Format: date-time
             * @description Updated at time of review
             */
            updatedAt: string;
            user: components["schemas"]["Profile"];
            /** @description ID of user */
            userId: string;
        };
        ReviewImage: {
            /**
             * Format: int64
             * @description ID of media of review
             */
            id: number;
            /**
             * Format: int32
             * @description Media order of media of review
             */
            index: number;
            /** @description ID of review */
            reviewId: string;
            /** @description URL of media of review */
            url: string;
        };
        SearchReportsOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            pagination: components["schemas"]["PaginationInfo"];
            reports: components["schemas"]["Report"][];
        };
        SearchUserFollowingOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            friends: components["schemas"]["Profile"][];
        };
        SendForgotPasswordEmailInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: email
             * @description Email of the user
             */
            email: string;
        };
        StartNewExportTaskInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Which data to include */
            include: string[];
            /** @description IDs of the POIs to export */
            poiIds: string[];
        };
        StartNewExportTaskOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            task: components["schemas"]["ExportTaskMetadata"];
        };
        Trip: {
            /**
             * Format: date-time
             * @description Created at time of trip
             */
            createdAt: string;
            /** @description Description of the trip */
            description: string;
            /**
             * Format: date-time
             * @description End datetime of the trip
             */
            endAt: string;
            /** @description Trip ID */
            id: string;
            locations: components["schemas"]["TripLocation"][];
            owner: components["schemas"]["TripUser"];
            /** @description Owner User ID */
            ownerId: string;
            participants: components["schemas"]["TripUser"][];
            requestedAmenities: components["schemas"]["Amenity"][];
            /**
             * Format: date-time
             * @description Start datetime of the trip
             */
            startAt: string;
            /** @description Status of the trip */
            status: string;
            /** @description Title of the trip */
            title: string;
            /**
             * Format: date-time
             * @description Updated at time of trip
             */
            updatedAt: string;
            /** @description Visibility level of the trip */
            visibilityLevel: string;
        };
        TripComment: {
            /** @description Content of comment */
            content: string;
            /**
             * Format: date-time
             * @description Created at time of the comment
             */
            createdAt: string;
            from: components["schemas"]["TripUser"];
            /** @description ID of comment */
            id: string;
            /** @description Trip ID */
            tripId: string;
        };
        TripInvite: {
            /**
             * Format: date-time
             * @description Expires at time of invite
             */
            expiresAt: string;
            from: components["schemas"]["TripUser"];
            /** @description ID of invite */
            id: string;
            /** @description Role of invite */
            role: string;
            /**
             * Format: date-time
             * @description Sent at time of invite
             */
            sentAt: string;
            to: components["schemas"]["TripUser"];
            /** @description Trip ID */
            tripId: string;
            /** @description Title of the trip */
            tripTitle: string;
        };
        TripInviteActionOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            accepted: boolean;
        };
        TripInviteDetail: {
            /**
             * Format: date-time
             * @description End datetime of the trip
             */
            endAt: string;
            /**
             * Format: date-time
             * @description Expires at time of invite
             */
            expiresAt: string;
            from: components["schemas"]["TripUser"];
            /** @description ID of invite */
            id: string;
            /** @description Role of invite */
            role: string;
            /**
             * Format: date-time
             * @description Sent at time of invite
             */
            sentAt: string;
            /**
             * Format: date-time
             * @description Start datetime of the trip
             */
            startAt: string;
            to: components["schemas"]["TripUser"];
            /** @description Trip ID */
            tripId: string;
            /** @description Title of the trip */
            tripTitle: string;
        };
        TripLocation: {
            /** @description Description of the location */
            description: string;
            /** @description ID of location */
            id: string;
            poi: components["schemas"]["Poi"];
            /** @description Point of Interest ID */
            poiId: string;
            /**
             * Format: date-time
             * @description Scheduled time of the location
             */
            scheduledTime: string;
            /** @description Trip ID */
            tripId: string;
        };
        TripUser: {
            /** @description User full name */
            fullName: string;
            /** @description User ID */
            id: string;
            /** @description Profile image URL of the user */
            profileImage: string;
            /**
             * @description Role of the user
             * @enum {string}
             */
            role: "participant" | "editor";
            /** @description Username */
            username: string;
        };
        UpdateAmenityInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Name of the amenity */
            name: string;
        };
        UpdateAmenityOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: int32
             * @description ID of the amenity
             */
            id: number;
            /** @description Name of the amenity */
            name: string;
        };
        UpdateCategoryInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: uri
             * @description Image URL
             */
            image: string;
            /** @description Name of the category */
            name: string;
        };
        UpdateCategoryOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: int32
             * @description ID of the category
             */
            id: number;
            /** @description Image URL */
            image: string;
            /** @description Name of the category */
            name: string;
        };
        UpdateCityInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Country code */
            countryCode: string;
            /** @description Country name */
            countryName: string;
            /** @description City description */
            description: string;
            /**
             * Format: uri
             * @description Image URL
             */
            image: string;
            /**
             * Format: double
             * @description Latitude
             */
            latitude: number;
            /**
             * Format: double
             * @description Longitude
             */
            longitude: number;
            /** @description City name */
            name: string;
            /** @description State code */
            stateCode: string;
            /** @description State name */
            stateName: string;
        };
        UpdateCityOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            coordinates: components["schemas"]["CityCoordinates"];
            country: components["schemas"]["CityCountry"];
            /** @description City description */
            description: string;
            /**
             * Format: int32
             * @description City ID
             */
            id: number;
            image: string;
            /** @description City name */
            name: string;
            state: components["schemas"]["CityState"];
        };
        UpdateCollectionInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Description of the collection */
            description: string;
            /** @description Name of the collection */
            name: string;
        };
        UpdateCollectionItemsInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            newOrder: components["schemas"]["NewOrderItem"][];
        };
        UpdateCollectionItemsOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            collection: components["schemas"]["Collection"];
        };
        UpdateCollectionOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            collection: components["schemas"]["Collection"];
        };
        UpdateDiaryFriendsInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description IDs of the friends */
            friends: string[];
        };
        UpdateDiaryFriendsOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            diary: components["schemas"]["Diary"];
        };
        UpdateDiaryImageInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description IDs of the images */
            ids: number[];
        };
        UpdateDiaryImageOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            diary: components["schemas"]["Diary"];
        };
        UpdateDiaryInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: date-time
             * @description The date of the diary entry
             */
            date: string;
            /** @description The description of the diary entry */
            description?: string;
            /** @description Whether the diary entry is shared with friends or not */
            shareWithFriends: boolean;
            /** @description The title of the diary entry */
            title: string;
        };
        UpdateDiaryLocationItem: {
            /** @description Description of the location */
            description?: string | null;
            /** @description ID of the point of interest */
            poiId: string;
        };
        UpdateDiaryLocationsInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description IDs of the locations */
            locations: components["schemas"]["UpdateDiaryLocationItem"][];
        };
        UpdateDiaryLocationsOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            diary: components["schemas"]["Diary"];
        };
        UpdateDiaryOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            diary: components["schemas"]["Diary"];
        };
        UpdateListInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            isPublic: boolean;
            name: string;
        };
        UpdateListItemsInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            poiIds: string[];
        };
        UpdateListItemsOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            list: components["schemas"]["List"];
        };
        UpdateListOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            list: components["schemas"]["List"];
        };
        UpdatePoiAddressInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: int32
             * @description ID of city
             */
            cityId: number;
            /**
             * Format: double
             * @description Latitude
             */
            lat: number;
            /** @description Line 1 */
            line1: string;
            /** @description Line 2 */
            line2: string | null;
            /**
             * Format: double
             * @description Longitude
             */
            lng: number;
            /** @description Postal code */
            postalCode: string | null;
        };
        UpdatePoiAddressOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            poi: components["schemas"]["Poi"];
        };
        UpdatePoiAmenitiesInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description IDs of amenities */
            amenityIds: number[];
        };
        UpdatePoiAmenitiesOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            poi: components["schemas"]["Poi"];
        };
        UpdatePoiHoursHour: {
            /** @description Closes at */
            closesAt: string;
            /**
             * @description Day
             * @enum {string}
             */
            day: "mon" | "tue" | "wed" | "thu" | "fri" | "sat" | "sun";
            /** @description Opens at */
            opensAt: string;
        };
        UpdatePoiHoursInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Hours */
            hours: components["schemas"]["UpdatePoiHoursHour"][];
        };
        UpdatePoiHoursOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            poi: components["schemas"]["Poi"];
        };
        UpdatePoiImageInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Alt of image */
            alt: string;
        };
        UpdatePoiImageOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            poi: components["schemas"]["Poi"];
        };
        UpdatePoiInfoInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: int32
             * @description Accessibility level
             */
            accessibilityLevel: number;
            /**
             * Format: int32
             * @description ID of category
             */
            categoryId: number;
            /** @description Description of point of interest */
            description: string;
            /** @description Name of point of interest */
            name: string;
            /** @description Phone number */
            phone: string | null;
            /**
             * Format: int32
             * @description Price level
             */
            priceLevel: number;
            /** @description Website */
            website: string | null;
        };
        UpdatePoiInfoOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            poi: components["schemas"]["Poi"];
        };
        UpdateReportInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Description of the report */
            description: string;
            /**
             * Format: int32
             * @description Reason for the report
             */
            reason: number;
            /** @description Whether the report is resolved */
            resolved: boolean;
        };
        UpdateReportOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            report: components["schemas"]["Report"];
        };
        UpdateTripAmenitiesInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Amenities IDs */
            amenityIds: number[];
        };
        UpdateTripAmenitiesOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            amenities: components["schemas"]["Amenity"][];
        };
        UpdateTripCommentInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Content of comment */
            content: string;
        };
        UpdateTripCommentOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            comment: components["schemas"]["TripComment"];
        };
        UpdateTripInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Trip description */
            description: string;
            /**
             * Format: date-time
             * @description End datetime of the trip
             */
            endAt: string;
            /**
             * Format: date-time
             * @description Start datetime of the trip
             */
            startAt: string;
            /** @description Trip title */
            title: string;
            /**
             * @description Trip visibility level
             * @enum {string}
             */
            visibilityLevel: "public" | "friends" | "private";
        };
        UpdateTripLocationInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Description of the location */
            description?: string | null;
            /**
             * Format: date-time
             * @description Scheduled time of the location
             */
            scheduledTime?: string | null;
        };
        UpdateTripLocationOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            location: components["schemas"]["TripLocation"];
        };
        UpdateTripOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            trip: components["schemas"]["Trip"];
        };
        UpdateUserProfileImageInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description File name of image */
            fileName: string;
            /** @description ID of image */
            id: string;
        };
        UpdateUserProfileImageOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description URL of image upload endpoint */
            url: string;
        };
        UpdateUserProfileInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Bio of the user */
            bio?: string | null;
            /** @description Full name of the user */
            fullName: string;
            /** @description Phone number of the user */
            phone?: string | null;
            /** @description Pronouns of the user */
            pronouns?: string | null;
            /**
             * Format: uri
             * @description Website of the user
             */
            website?: string | null;
        };
        UpdateUserProfileOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            profile: components["schemas"]["Profile"];
        };
        UpdateUserTopPoisInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description IDs of points of interests */
            poiIds: string[];
        };
        UpdateUserTopPoisOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            pois: components["schemas"]["Poi"][];
        };
        UploadDiaryImageInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description File name of image */
            fileName: string;
            /** @description ID of image */
            id: string;
            /**
             * Format: int32
             * @description Size of media of point of interest
             */
            size: number;
        };
        UploadDiaryImageOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            diary: components["schemas"]["Diary"];
        };
        UploadPoiImageInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Alt of image */
            alt: string;
            /** @description File name of image */
            fileName: string;
            /** @description ID of image */
            id: string;
            /** @description URL of image */
            url: string;
        };
        UploadPoiImageOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            poi: components["schemas"]["Poi"];
        };
        UploadReviewMediaInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description File name of image */
            fileName: string;
            /** @description ID of image */
            id: string;
            /**
             * Format: int32
             * @description Size of media of point of interest
             */
            size: number;
        };
        UploadReviewMediaOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            review: components["schemas"]["Review"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "auth-get-me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMeOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
}
