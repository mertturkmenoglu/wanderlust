/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v2/aggregator/home": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Home Aggregation
         * @description Get home aggregation
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HomeAggregatorOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/amenities/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Amenities
         * @description Get all amenities
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ListAmenitiesOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Amenity
         * @description Create a new amenity
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateAmenityInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateAmenityOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/amenities/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Amenity
         * @description Delete an amenity by id
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of the amenity
                     * @example 15
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update Amenity
         * @description Update an amenity by id
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of the amenity
                     * @example 15
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateAmenityInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateAmenityOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/auth/credentials/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login with Credentials
         * @description Login with email and password
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        Authorization?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LoginOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/auth/credentials/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register with Credentials
         * @description Register with email and password
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RegisterInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RegisterOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/auth/forgot-password/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset Password
         * @description Reset the password of the user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ResetPasswordInputBody"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/auth/forgot-password/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Forgot Password Email
         * @description Send forgot password email to the user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SendForgotPasswordEmailInputBody"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User
         * @description Get the current user information
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetMeOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/auth/verify-email/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Verification Email
         * @description Send verification email to the user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SendVerificationEmailInputBody"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/auth/verify-email/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Verify Email
         * @description Verify the email of the user
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Verification code
                     * @example 123456
                     */
                    code: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/auth/{provider}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Start OAuth Flow
         * @description Start the OAuth flow for the given provider
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The OAuth provider
                     * @example google
                     */
                    provider: "google" | "facebook";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Temporary Redirect */
                307: {
                    headers: {
                        Location?: string;
                        "Set-Cookie"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/auth/{provider}/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * OAuth Callback
         * @description Callback for the OAuth flow
         */
        get: {
            parameters: {
                query?: {
                    /** @description Authorization code received from the OAuth provider */
                    code?: string;
                    /** @description State of the OAuth request */
                    state?: string;
                };
                header?: never;
                path: {
                    /**
                     * @description The OAuth provider
                     * @example google
                     */
                    provider: "google" | "facebook";
                };
                cookie?: {
                    /** @description State of the OAuth request */
                    state?: string;
                };
            };
            requestBody?: never;
            responses: {
                /** @description Temporary Redirect */
                307: {
                    headers: {
                        Location?: string;
                        "Set-Cookie"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/bookmarks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Bookmarks
         * @description Get a list of bookmarks for the current user
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number
                     * @example 2
                     */
                    page?: number;
                    /**
                     * @description Page size
                     * @example 20
                     */
                    pageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetUserBookmarksOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Bookmark
         * @description Create a bookmark for a point of interest
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateBookmarkInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateBookmarkOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/bookmarks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Bookmark
         * @description Delete a bookmark for a point of interest
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of point of interest
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Categories
         * @description Get all categories
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ListCategoriesOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Category
         * @description Create a new category
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateCategoryInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateCategoryOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Category
         * @description Delete a category by id
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of the category
                     * @example 4
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update Category
         * @description Update a category by id
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of the category
                     * @example 4
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateCategoryInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateCategoryOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/cities/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List cities
         * @description List cities
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CitiesListOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create city
         * @description Create a new city
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateCityInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateCityOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/cities/featured": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Featured cities
         * @description Get featured cities
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CitiesFeaturedOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/cities/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get city
         * @description Get city by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description City ID
                     * @example 8102
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetCityByIdOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete city
         * @description Delete city by ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description City ID
                     * @example 8102
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update city
         * @description Update city by ID
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description City ID
                     * @example 8102
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateCityInputBody"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UpdateCityOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v2/favorites/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Favorites
         * @description Get a list of favorites for the current user
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number
                     * @example 2
                     */
                    page?: number;
                    /**
                     * @description Page size
                     * @example 20
                     */
                    pageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetUserFavoritesOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Favorite
         * @description Create a favorite for a point of interest
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateFavoriteInputBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateFavoriteOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/favorites/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Favorite
         * @description Delete a favorite for a point of interest
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of point of interest
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/favorites/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Favorites by Username
         * @description Get a list of favorites for the given username
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number
                     * @example 2
                     */
                    page?: number;
                    /**
                     * @description Page size
                     * @example 20
                     */
                    pageSize?: number;
                };
                header?: never;
                path: {
                    /**
                     * @description Username of the user
                     * @example johndoe
                     */
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetUserFavoritesOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Health
         * @description A simple health check mechanism to verify that the API is operational
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/pois/peek": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Peek Point of Interests
         * @description Get 25 pois
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PeekPoisOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/pois/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Point of Interest
         * @description Get a point of interest by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of point of interest
                     * @example 7323488942953598976
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetPoiByIdOutputBody"];
                    };
                };
                /** @description Error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ErrorModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Address: {
            city: components["schemas"]["City"];
            /**
             * Format: int32
             * @description ID of city of address of point of interest
             */
            cityId: number;
            /**
             * Format: int32
             * @description ID of address of point of interest
             */
            id: number;
            /**
             * Format: double
             * @description Latitude of address of point of interest
             */
            lat: number;
            /** @description Line 1 of address of point of interest */
            line1: string;
            /** @description Line 2 of address of point of interest */
            line2: string | null;
            /**
             * Format: double
             * @description Longitude of address of point of interest
             */
            lng: number;
            /** @description Postal code of address of point of interest */
            postalCode: string | null;
        };
        Amenity: {
            /**
             * Format: int32
             * @description ID of the amenity
             */
            id: number;
            /** @description Name of the amenity */
            name: string;
        };
        Bookmark: {
            /**
             * Format: date-time
             * @description Created at time of bookmark
             */
            createdAt: string;
            /**
             * Format: int32
             * @description ID of bookmark
             */
            id: number;
            poi: components["schemas"]["BookmarkPoi"];
            /** @description ID of point of interest */
            poiId: string;
            /** @description ID of user */
            userId: string;
        };
        BookmarkPoi: {
            address: components["schemas"]["Address"];
            /**
             * Format: int32
             * @description ID of address of point of interest
             */
            addressId: number;
            category: components["schemas"]["Category"];
            /**
             * Format: int32
             * @description ID of category of point of interest
             */
            categoryId: number;
            firstMedia: components["schemas"]["Media"];
            /** @description ID of point of interest */
            id: string;
            /** @description Name of point of interest */
            name: string;
        };
        Category: {
            /**
             * Format: int32
             * @description ID of the category
             */
            id: number;
            /** @description Image URL */
            image: string;
            /** @description Name of the category */
            name: string;
        };
        CitiesFeaturedOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            cities: components["schemas"]["City"][];
        };
        CitiesListOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            cities: components["schemas"]["City"][];
        };
        City: {
            coordinates: components["schemas"]["CityCoordinates"];
            country: components["schemas"]["CityCountry"];
            /** @description City description */
            description: string;
            /**
             * Format: int32
             * @description City ID
             */
            id: number;
            image: components["schemas"]["CityImage"];
            /** @description City name */
            name: string;
            state: components["schemas"]["CityState"];
        };
        CityCoordinates: {
            /**
             * Format: double
             * @description Latitude
             */
            latitude: number;
            /**
             * Format: double
             * @description Longitude
             */
            longitude: number;
        };
        CityCountry: {
            /** @description Country code */
            code: string;
            /** @description Country name */
            name: string;
        };
        CityImage: {
            /** @description Image attribution */
            attribution: string | null;
            /** @description Image attribution link */
            attributionLink: string | null;
            /** @description Image license */
            license: string | null;
            /** @description Image license link */
            licenseLink: string | null;
            /** @description Image URL */
            url: string;
        };
        CityState: {
            /** @description State code */
            code: string;
            /** @description State name */
            name: string;
        };
        CreateAmenityInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Name of the amenity */
            name: string;
        };
        CreateAmenityOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: int32
             * @description ID of the amenity
             */
            id: number;
            /** @description Name of the amenity */
            name: string;
        };
        CreateBookmarkInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description ID of point of interest */
            poiId: string;
        };
        CreateBookmarkOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: date-time
             * @description Created at time of bookmark
             */
            createdAt: string;
            /**
             * Format: int32
             * @description ID of bookmark
             */
            id: number;
            /** @description ID of point of interest */
            poiId: string;
            /** @description ID of user */
            userId: string;
        };
        CreateCategoryInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: int32
             * @description ID of the category
             */
            id: number;
            /**
             * Format: uri
             * @description Image URL
             */
            image: string;
            /** @description Name of the category */
            name: string;
        };
        CreateCategoryOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: int32
             * @description ID of the category
             */
            id: number;
            /** @description Image URL */
            image: string;
            /** @description Name of the category */
            name: string;
        };
        CreateCityInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Country code */
            countryCode: string;
            /** @description Country name */
            countryName: string;
            /** @description City description */
            description: string;
            /**
             * Format: int32
             * @description City ID
             */
            id: number;
            /** @description Image attribution */
            imageAttribute: string;
            /** @description Image attribution link */
            imageAttributionLink: string;
            /** @description Image license */
            imageLicense: string;
            /**
             * Format: uri
             * @description Image license link
             */
            imageLicenseLink: string;
            /**
             * Format: uri
             * @description Image URL
             */
            imageUrl: string;
            /**
             * Format: double
             * @description Latitude
             */
            latitude: number;
            /**
             * Format: double
             * @description Longitude
             */
            longitude: number;
            /** @description City name */
            name: string;
            /** @description State code */
            stateCode: string;
            /** @description State name */
            stateName: string;
        };
        CreateCityOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            coordinates: components["schemas"]["CityCoordinates"];
            country: components["schemas"]["CityCountry"];
            /** @description City description */
            description: string;
            /**
             * Format: int32
             * @description City ID
             */
            id: number;
            image: components["schemas"]["CityImage"];
            /** @description City name */
            name: string;
            state: components["schemas"]["CityState"];
        };
        CreateFavoriteInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description ID of point of interest */
            poiId: string;
        };
        CreateFavoriteOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: date-time
             * @description Created at time of favorite
             */
            createdAt: string;
            /**
             * Format: int32
             * @description ID of favorite
             */
            id: number;
            /** @description ID of point of interest */
            poiId: string;
            /** @description ID of user */
            userId: string;
        };
        ErrorDetail: {
            /** @description Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
            location?: string;
            /** @description Error message text */
            message?: string;
            /** @description The value at the given location */
            value?: unknown;
        };
        ErrorModel: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail?: string;
            /** @description Optional list of individual error details */
            errors?: components["schemas"]["ErrorDetail"][];
            /**
             * Format: uri
             * @description A URI reference that identifies the specific occurrence of the problem.
             */
            instance?: string;
            /**
             * Format: int64
             * @description HTTP status code
             */
            status?: number;
            /** @description A short, human-readable summary of the problem type. This value should not change between occurrences of the error. */
            title?: string;
            /**
             * Format: uri
             * @description A URI reference to human-readable documentation for the error.
             * @default about:blank
             */
            type: string;
        };
        Favorite: {
            /**
             * Format: date-time
             * @description Created at time of favorite
             */
            createdAt: string;
            /**
             * Format: int32
             * @description ID of favorite
             */
            id: number;
            poi: components["schemas"]["FavoritePoi"];
            /** @description ID of point of interest */
            poiId: string;
            /** @description ID of user */
            userId: string;
        };
        FavoritePoi: {
            address: components["schemas"]["Address"];
            /**
             * Format: int32
             * @description ID of address of point of interest
             */
            addressId: number;
            category: components["schemas"]["Category"];
            /**
             * Format: int32
             * @description ID of category of point of interest
             */
            categoryId: number;
            firstMedia: components["schemas"]["Media"];
            /** @description ID of point of interest */
            id: string;
            /** @description Name of point of interest */
            name: string;
        };
        GetCityByIdOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            coordinates: components["schemas"]["CityCoordinates"];
            country: components["schemas"]["CityCountry"];
            /** @description City description */
            description: string;
            /**
             * Format: int32
             * @description City ID
             */
            id: number;
            image: components["schemas"]["CityImage"];
            /** @description City name */
            name: string;
            state: components["schemas"]["CityState"];
        };
        GetMeOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Banner image of the user */
            bannerImage?: string | null;
            /** @description Bio of the user */
            bio?: string | null;
            /**
             * Format: date-time
             * @description Creation date of the user
             */
            createdAt: string;
            /** @description Email of the user */
            email: string;
            /** @description Facebook ID of the user */
            facebookId?: string | null;
            /**
             * Format: int32
             * @description Number of followers
             */
            followersCount: number;
            /**
             * Format: int32
             * @description Number of following
             */
            followingCount: number;
            /** @description Full name of the user */
            fullName: string;
            /** @description Google ID of the user */
            googleId?: string | null;
            /** @description ID of the user */
            id: string;
            /** @description Is the user active */
            isActive: boolean;
            /** @description Is the user a business account */
            isBusinessAccount: boolean;
            /** @description Is the email verified */
            isEmailVerified: boolean;
            /** @description Is the onboarding completed */
            isOnboardingCompleted: boolean;
            /** @description Is the user verified */
            isVerified: boolean;
            /**
             * Format: date-time
             * @description Last login date of the user
             */
            lastLogin: string;
            /** @description Phone number of the user */
            phone?: string | null;
            /** @description Profile image of the user */
            profileImage?: string | null;
            /** @description Pronouns of the user */
            pronouns?: string | null;
            /** @description Role of the user */
            role: string;
            /**
             * Format: date-time
             * @description Last update date of the user
             */
            updatedAt: string;
            /** @description Username of the user */
            username: string;
            /** @description Website of the user */
            website?: string | null;
        };
        GetPoiByIdMeta: {
            isBookmarked: boolean;
            isFavorite: boolean;
        };
        GetPoiByIdOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            meta: components["schemas"]["GetPoiByIdMeta"];
            poi: components["schemas"]["Poi"];
        };
        GetUserBookmarksOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            bookmarks: components["schemas"]["Bookmark"][];
            pagination: components["schemas"]["PaginationInfo"];
        };
        GetUserFavoritesOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            favorites: components["schemas"]["Favorite"][];
            pagination: components["schemas"]["PaginationInfo"];
        };
        HealthOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Health message of the API */
            message: string;
        };
        HomeAggregatorOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            favorites: components["schemas"]["HomeAggregatorPoi"][];
            featured: components["schemas"]["HomeAggregatorPoi"][];
            new: components["schemas"]["HomeAggregatorPoi"][];
            popular: components["schemas"]["HomeAggregatorPoi"][];
        };
        HomeAggregatorPoi: {
            address: components["schemas"]["Address"];
            /** Format: int32 */
            addressId: number;
            category: components["schemas"]["Category"];
            /** Format: int32 */
            categoryId: number;
            id: string;
            media: components["schemas"]["Media"];
            name: string;
        };
        ListAmenitiesOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            amenities: components["schemas"]["Amenity"][];
        };
        ListCategoriesOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            categories: components["schemas"]["Category"][];
        };
        LoginInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: email
             * @description Email of the user
             */
            email: string;
            /** @description Password of the user */
            password: string;
        };
        LoginOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description JWT token for the user */
            token: string;
        };
        Media: {
            /** @description Alt of media of point of interest */
            alt: string;
            /** @description Caption of media of point of interest */
            caption: string | null;
            /**
             * Format: date-time
             * @description Created at time of media of point of interest
             */
            createdAt: string;
            /** @description Extension of media of point of interest */
            extension: string;
            /**
             * Format: int64
             * @description File size of media of point of interest
             */
            fileSize: number;
            /**
             * Format: int32
             * @description Height of media of point of interest
             */
            height: number;
            /**
             * Format: int64
             * @description ID of media of point of interest
             */
            id: number;
            /**
             * Format: int32
             * @description Media order of media of point of interest
             */
            mediaOrder: number;
            /** @description Mime type of media of point of interest */
            mimeType: string;
            /** @description ID of point of interest */
            poiId: string;
            /** @description Thumbnail of media of point of interest */
            thumbnail: string;
            /** @description URL of media of point of interest */
            url: string;
            /**
             * Format: int32
             * @description Width of media of point of interest
             */
            width: number;
        };
        OpenHours: {
            /** @description Closing time of POI in 24H format */
            closesAt: string;
            /** @description Opening time of POI in 24H format */
            opensAt: string;
        };
        PaginationInfo: {
            /** @description Has next page */
            hasNext: boolean;
            /** @description Has previous page */
            hasPrevious: boolean;
            /**
             * Format: int64
             * @description Page number
             */
            page: number;
            /**
             * Format: int64
             * @description Page size
             */
            pageSize: number;
            /**
             * Format: int64
             * @description Total pages
             */
            totalPages: number;
            /**
             * Format: int64
             * @description Total records
             */
            totalRecords: number;
        };
        PeekPoisOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            pois: components["schemas"]["Poi"][];
        };
        Poi: {
            /**
             * Format: int32
             * @description Accessibility level of point of interest
             */
            accessibilityLevel: number;
            address: components["schemas"]["Address"];
            /**
             * Format: int32
             * @description ID of address of point of interest
             */
            addressId: number;
            amenities: components["schemas"]["Amenity"][];
            category: components["schemas"]["Category"];
            /**
             * Format: int32
             * @description ID of category of point of interest
             */
            categoryId: number;
            /**
             * Format: date-time
             * @description Created at time of point of interest
             */
            createdAt: string;
            /** @description Description of point of interest */
            description: string;
            /** @description ID of point of interest */
            id: string;
            media: components["schemas"]["Media"][];
            /** @description Name of point of interest */
            name: string;
            openTimes: {
                [key: string]: components["schemas"]["OpenHours"];
            };
            /** @description Phone number of point of interest */
            phone: string | null;
            /**
             * Format: int32
             * @description Price level of point of interest
             */
            priceLevel: number;
            /**
             * Format: int32
             * @description Total favorites of point of interest
             */
            totalFavorites: number;
            /**
             * Format: int32
             * @description Total points of point of interest
             */
            totalPoints: number;
            /**
             * Format: int32
             * @description Total votes of point of interest
             */
            totalVotes: number;
            /**
             * Format: date-time
             * @description Updated at time of point of interest
             */
            updatedAt: string;
            /** @description Website of point of interest */
            website: string | null;
        };
        RegisterInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: email
             * @description Email of the user
             */
            email: string;
            /** @description Full name of the user */
            fullName: string;
            /** @description Password of the user */
            password: string;
            /** @description Username of the user */
            username: string;
        };
        RegisterOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: date-time
             * @description Creation date of the user
             */
            createdAt: string;
            /** @description Email of the user */
            email: string;
            /** @description Full name of the user */
            fullName: string;
            /** @description ID of the user */
            id: string;
            /**
             * Format: date-time
             * @description Last update date of the user
             */
            updatedAt: string;
            /** @description Username of the user */
            username: string;
        };
        ResetPasswordInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Verification code */
            code: string;
            /**
             * Format: email
             * @description Email of the user
             */
            email: string;
            /** @description New password of the user */
            newPassword: string;
        };
        SendForgotPasswordEmailInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: email
             * @description Email of the user
             */
            email: string;
        };
        SendVerificationEmailInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: email
             * @description Email of the user
             */
            email: string;
        };
        UpdateAmenityInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Name of the amenity */
            name: string;
        };
        UpdateAmenityOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: int32
             * @description ID of the amenity
             */
            id: number;
            /** @description Name of the amenity */
            name: string;
        };
        UpdateCategoryInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: uri
             * @description Image URL
             */
            image: string;
            /** @description Name of the category */
            name: string;
        };
        UpdateCategoryOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * Format: int32
             * @description ID of the category
             */
            id: number;
            /** @description Image URL */
            image: string;
            /** @description Name of the category */
            name: string;
        };
        UpdateCityInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Country code */
            countryCode: string;
            /** @description Country name */
            countryName: string;
            /** @description City description */
            description: string;
            /** @description Image attribution */
            imageAttribute: string;
            /** @description Image attribution link */
            imageAttributionLink: string;
            /** @description Image license */
            imageLicense: string;
            /**
             * Format: uri
             * @description Image license link
             */
            imageLicenseLink: string;
            /**
             * Format: uri
             * @description Image URL
             */
            imageUrl: string;
            /**
             * Format: double
             * @description Latitude
             */
            latitude: number;
            /**
             * Format: double
             * @description Longitude
             */
            longitude: number;
            /** @description City name */
            name: string;
            /** @description State code */
            stateCode: string;
            /** @description State name */
            stateName: string;
        };
        UpdateCityOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            coordinates: components["schemas"]["CityCoordinates"];
            country: components["schemas"]["CityCountry"];
            /** @description City description */
            description: string;
            /**
             * Format: int32
             * @description City ID
             */
            id: number;
            image: components["schemas"]["CityImage"];
            /** @description City name */
            name: string;
            state: components["schemas"]["CityState"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
