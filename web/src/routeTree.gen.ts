/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TripsIndexImport } from './routes/trips/index'
import { Route as TermsIndexImport } from './routes/terms/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as PrivacyIndexImport } from './routes/privacy/index'
import { Route as NotificationsIndexImport } from './routes/notifications/index'
import { Route as ListsIndexImport } from './routes/lists/index'
import { Route as HelpIndexImport } from './routes/help/index'
import { Route as DiaryIndexImport } from './routes/diary/index'
import { Route as BookmarksIndexImport } from './routes/bookmarks/index'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'
import { Route as UUsernameIndexImport } from './routes/u/$username/index'
import { Route as AuthSignUpIndexImport } from './routes/_auth/sign-up/index'
import { Route as AuthSignInIndexImport } from './routes/_auth/sign-in/index'
import { Route as UUsernameFollowingIndexImport } from './routes/u/$username/following/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TripsIndexRoute = TripsIndexImport.update({
  id: '/trips/',
  path: '/trips/',
  getParentRoute: () => rootRoute,
} as any)

const TermsIndexRoute = TermsIndexImport.update({
  id: '/terms/',
  path: '/terms/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyIndexRoute = PrivacyIndexImport.update({
  id: '/privacy/',
  path: '/privacy/',
  getParentRoute: () => rootRoute,
} as any)

const NotificationsIndexRoute = NotificationsIndexImport.update({
  id: '/notifications/',
  path: '/notifications/',
  getParentRoute: () => rootRoute,
} as any)

const ListsIndexRoute = ListsIndexImport.update({
  id: '/lists/',
  path: '/lists/',
  getParentRoute: () => rootRoute,
} as any)

const HelpIndexRoute = HelpIndexImport.update({
  id: '/help/',
  path: '/help/',
  getParentRoute: () => rootRoute,
} as any)

const DiaryIndexRoute = DiaryIndexImport.update({
  id: '/diary/',
  path: '/diary/',
  getParentRoute: () => rootRoute,
} as any)

const BookmarksIndexRoute = BookmarksIndexImport.update({
  id: '/bookmarks/',
  path: '/bookmarks/',
  getParentRoute: () => rootRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

const UUsernameIndexRoute = UUsernameIndexImport.update({
  id: '/u/$username/',
  path: '/u/$username/',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignUpIndexRoute = AuthSignUpIndexImport.update({
  id: '/_auth/sign-up/',
  path: '/sign-up/',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignInIndexRoute = AuthSignInIndexImport.update({
  id: '/_auth/sign-in/',
  path: '/sign-in/',
  getParentRoute: () => rootRoute,
} as any)

const UUsernameFollowingIndexRoute = UUsernameFollowingIndexImport.update({
  id: '/u/$username/following/',
  path: '/u/$username/following/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
    '/bookmarks/': {
      id: '/bookmarks/'
      path: '/bookmarks'
      fullPath: '/bookmarks'
      preLoaderRoute: typeof BookmarksIndexImport
      parentRoute: typeof rootRoute
    }
    '/diary/': {
      id: '/diary/'
      path: '/diary'
      fullPath: '/diary'
      preLoaderRoute: typeof DiaryIndexImport
      parentRoute: typeof rootRoute
    }
    '/help/': {
      id: '/help/'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof HelpIndexImport
      parentRoute: typeof rootRoute
    }
    '/lists/': {
      id: '/lists/'
      path: '/lists'
      fullPath: '/lists'
      preLoaderRoute: typeof ListsIndexImport
      parentRoute: typeof rootRoute
    }
    '/notifications/': {
      id: '/notifications/'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/privacy/': {
      id: '/privacy/'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/terms/': {
      id: '/terms/'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsIndexImport
      parentRoute: typeof rootRoute
    }
    '/trips/': {
      id: '/trips/'
      path: '/trips'
      fullPath: '/trips'
      preLoaderRoute: typeof TripsIndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth/sign-in/': {
      id: '/_auth/sign-in/'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInIndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth/sign-up/': {
      id: '/_auth/sign-up/'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthSignUpIndexImport
      parentRoute: typeof rootRoute
    }
    '/u/$username/': {
      id: '/u/$username/'
      path: '/u/$username'
      fullPath: '/u/$username'
      preLoaderRoute: typeof UUsernameIndexImport
      parentRoute: typeof rootRoute
    }
    '/u/$username/following/': {
      id: '/u/$username/following/'
      path: '/u/$username/following'
      fullPath: '/u/$username/following'
      preLoaderRoute: typeof UUsernameFollowingIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/bookmarks': typeof BookmarksIndexRoute
  '/diary': typeof DiaryIndexRoute
  '/help': typeof HelpIndexRoute
  '/lists': typeof ListsIndexRoute
  '/notifications': typeof NotificationsIndexRoute
  '/privacy': typeof PrivacyIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/terms': typeof TermsIndexRoute
  '/trips': typeof TripsIndexRoute
  '/sign-in': typeof AuthSignInIndexRoute
  '/sign-up': typeof AuthSignUpIndexRoute
  '/u/$username': typeof UUsernameIndexRoute
  '/u/$username/following': typeof UUsernameFollowingIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/bookmarks': typeof BookmarksIndexRoute
  '/diary': typeof DiaryIndexRoute
  '/help': typeof HelpIndexRoute
  '/lists': typeof ListsIndexRoute
  '/notifications': typeof NotificationsIndexRoute
  '/privacy': typeof PrivacyIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/terms': typeof TermsIndexRoute
  '/trips': typeof TripsIndexRoute
  '/sign-in': typeof AuthSignInIndexRoute
  '/sign-up': typeof AuthSignUpIndexRoute
  '/u/$username': typeof UUsernameIndexRoute
  '/u/$username/following': typeof UUsernameFollowingIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/bookmarks/': typeof BookmarksIndexRoute
  '/diary/': typeof DiaryIndexRoute
  '/help/': typeof HelpIndexRoute
  '/lists/': typeof ListsIndexRoute
  '/notifications/': typeof NotificationsIndexRoute
  '/privacy/': typeof PrivacyIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/terms/': typeof TermsIndexRoute
  '/trips/': typeof TripsIndexRoute
  '/_auth/sign-in/': typeof AuthSignInIndexRoute
  '/_auth/sign-up/': typeof AuthSignUpIndexRoute
  '/u/$username/': typeof UUsernameIndexRoute
  '/u/$username/following/': typeof UUsernameFollowingIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/demo/tanstack-query'
    | '/bookmarks'
    | '/diary'
    | '/help'
    | '/lists'
    | '/notifications'
    | '/privacy'
    | '/settings'
    | '/terms'
    | '/trips'
    | '/sign-in'
    | '/sign-up'
    | '/u/$username'
    | '/u/$username/following'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/demo/tanstack-query'
    | '/bookmarks'
    | '/diary'
    | '/help'
    | '/lists'
    | '/notifications'
    | '/privacy'
    | '/settings'
    | '/terms'
    | '/trips'
    | '/sign-in'
    | '/sign-up'
    | '/u/$username'
    | '/u/$username/following'
  id:
    | '__root__'
    | '/'
    | '/demo/tanstack-query'
    | '/bookmarks/'
    | '/diary/'
    | '/help/'
    | '/lists/'
    | '/notifications/'
    | '/privacy/'
    | '/settings/'
    | '/terms/'
    | '/trips/'
    | '/_auth/sign-in/'
    | '/_auth/sign-up/'
    | '/u/$username/'
    | '/u/$username/following/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  BookmarksIndexRoute: typeof BookmarksIndexRoute
  DiaryIndexRoute: typeof DiaryIndexRoute
  HelpIndexRoute: typeof HelpIndexRoute
  ListsIndexRoute: typeof ListsIndexRoute
  NotificationsIndexRoute: typeof NotificationsIndexRoute
  PrivacyIndexRoute: typeof PrivacyIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  TermsIndexRoute: typeof TermsIndexRoute
  TripsIndexRoute: typeof TripsIndexRoute
  AuthSignInIndexRoute: typeof AuthSignInIndexRoute
  AuthSignUpIndexRoute: typeof AuthSignUpIndexRoute
  UUsernameIndexRoute: typeof UUsernameIndexRoute
  UUsernameFollowingIndexRoute: typeof UUsernameFollowingIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  BookmarksIndexRoute: BookmarksIndexRoute,
  DiaryIndexRoute: DiaryIndexRoute,
  HelpIndexRoute: HelpIndexRoute,
  ListsIndexRoute: ListsIndexRoute,
  NotificationsIndexRoute: NotificationsIndexRoute,
  PrivacyIndexRoute: PrivacyIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  TermsIndexRoute: TermsIndexRoute,
  TripsIndexRoute: TripsIndexRoute,
  AuthSignInIndexRoute: AuthSignInIndexRoute,
  AuthSignUpIndexRoute: AuthSignUpIndexRoute,
  UUsernameIndexRoute: UUsernameIndexRoute,
  UUsernameFollowingIndexRoute: UUsernameFollowingIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/demo/tanstack-query",
        "/bookmarks/",
        "/diary/",
        "/help/",
        "/lists/",
        "/notifications/",
        "/privacy/",
        "/settings/",
        "/terms/",
        "/trips/",
        "/_auth/sign-in/",
        "/_auth/sign-up/",
        "/u/$username/",
        "/u/$username/following/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    },
    "/bookmarks/": {
      "filePath": "bookmarks/index.tsx"
    },
    "/diary/": {
      "filePath": "diary/index.tsx"
    },
    "/help/": {
      "filePath": "help/index.tsx"
    },
    "/lists/": {
      "filePath": "lists/index.tsx"
    },
    "/notifications/": {
      "filePath": "notifications/index.tsx"
    },
    "/privacy/": {
      "filePath": "privacy/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    },
    "/terms/": {
      "filePath": "terms/index.tsx"
    },
    "/trips/": {
      "filePath": "trips/index.tsx"
    },
    "/_auth/sign-in/": {
      "filePath": "_auth/sign-in/index.tsx"
    },
    "/_auth/sign-up/": {
      "filePath": "_auth/sign-up/index.tsx"
    },
    "/u/$username/": {
      "filePath": "u/$username/index.tsx"
    },
    "/u/$username/following/": {
      "filePath": "u/$username/following/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
